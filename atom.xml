<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>DukeLuo&#39;s Blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://dukeluo.github.io/"/>
  <updated>2017-04-25T06:04:55.380Z</updated>
  <id>http://dukeluo.github.io/</id>
  
  <author>
    <name>DukeLuo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SICP笔记（一）</title>
    <link href="http://dukeluo.github.io/2017/04/25/no1-sicp-notes/"/>
    <id>http://dukeluo.github.io/2017/04/25/no1-sicp-notes/</id>
    <published>2017-04-24T16:00:00.000Z</published>
    <updated>2017-04-25T06:04:55.380Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>我使用的环境是DrRacket，安装好Racket后，打开主菜单”File”，找到”Package Manager…”，在”DO What I Mean”中输入”sicp”，导入sicp包。写Scheme程序时，首行写上”#lang sicp”。<br><a id="more"></a></p>
<p><img src="http://oonjkyvrf.bkt.clouddn.com/sicp/1.1/set-up-environment.PNG" alt=""></p>
<hr>
<h3 id="Scheme"><a href="#Scheme" class="headerlink" title="Scheme"></a>Scheme</h3><p>CS的关键是如何去对计算过程进行形式化表述，并如何实现它。计算机的过程必须是有效的。<br>Lisp是至今第二古老的语言，Lisp的语法规则简单，简单到几分钟就可以学会，简单的语法规则让使用者可以全心地去考虑程序的内部逻辑。Lisp自己解释自己，解释Lisp的步骤是apply and eval,两者不断地相互运行。SICP的教学语言是Lisp的一个方言Scheme。</p>
<hr>
<h3 id="程序设计的基本元素"><a href="#程序设计的基本元素" class="headerlink" title="程序设计的基本元素"></a>程序设计的基本元素</h3><p>任何一种强有力的编程语言，都应该有一下的三种机制：</p>
<ul>
<li>基本表达式</li>
<li>组合的方法</li>
<li>抽象的方法</li>
</ul>
<p>Scheme中的表达式采用前缀表示法，括号里最左边的叫操作符(operator)，其他的叫做操作对象(operand)。前缀表示法的优点，完全适用于带任意个实参的情况；可以直接扩充，理论上讲没有任何深度的限制。<br>define是最简单的一种抽象方法，通过define可以将值与符号关联。解释器维护着某种储存来跟踪符号和值的联系，这种储存就叫做环境。符号的值就是环境中和这些对象相互关联的对象，环境扮演的角色就是用于决定表达式中各个符号的意义。</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">square</span> x) (<span class="name"><span class="builtin-name">*</span></span> x x))</span><br><span class="line">(<span class="name"><span class="builtin-name">define</span></span> (<span class="name">square</span>) (<span class="name"><span class="builtin-name">lambda</span></span> (x) (<span class="name"><span class="builtin-name">*</span></span> x x)))</span><br></pre></td></tr></table></figure>
<p>这两种定义方式是等价的，都是定义了一个square过程，可以看作语法糖关系。</p>
<hr>
<h3 id="应用序-·-正则序"><a href="#应用序-·-正则序" class="headerlink" title="应用序 · 正则序"></a>应用序 · 正则序</h3><p>正则序(normal-order evaluation)；完全展开而后归约(fully expend and then reduce)<br>应用序(applicative-order evaluation)；先求值参数而后应用(evaluate the arguments and apply)<br>Lisp采用应用序，可以避免对表达式的重复求值；超出替换方式模拟的过程范围后，正则序的处理将会变得更复杂。<br>可以通过Ben测试来区分解释器采用的是应用序还是正则序求值。 </p>
<hr>
<h3 id="cond-·-if"><a href="#cond-·-if" class="headerlink" title="cond · if"></a>cond · if</h3><p>if是特殊形式，是条件表达式的一种受限形式，有自己特殊的规则，而一般的条件表达式不具有。and和or都是特殊形式而不是普通的过程，因为它们的子表达式不一定都会求值，而not是普通的过程。</p>
<hr>
<h3 id="Black-Box-Abstraction"><a href="#Black-Box-Abstraction" class="headerlink" title="Black-Box Abstraction"></a>Black-Box Abstraction</h3><p>一个递归的过程，是基于自身过程的定义。<br>过程用户不必去关心过程的实现细节，可以看成一个black box，只需了解这个的过程的作用是什么，能产生什么样的结果。<br>过程里的形式参数扮演着一个特殊的角色，形式参数的具体名字是什么并不重要，并不影响过程实现的功能，这样的名字称为约束变量(bound variable)。一个过程的定义约束了它的所有形式参数。相对的，如果一个参数不被约束，就说它是自由的(free)。过程的形式参数是相应过程体里的局部名字。<br>在形式参数的作用域中，没有必要显式地传递其值，可以让其作为内部定义的自由变量。</p>
<hr>
<p>习题解答：<a href="https://github.com/DukeLuo/sicp_exercise_answer" target="_blank" rel="external">传送门</a><br>参考资料：<a href="http://docs.racket-lang.org/sicp-manual/index.html" target="_blank" rel="external">SICP Collections</a></p>
<p><strong>版权声明</strong></p>
<p><img src="http://oonjkyvrf.bkt.clouddn.com/cc.png" alt=""></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5 中国大陆许可协议</a>进行许可。<br>本文首发于<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>。欢迎转载，但转载请注明来自<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。  </p>
<p>本文永久链接：<a href="http://dukeluo.github.io/2017/04/25/no1-sicp-notes/">http://dukeluo.github.io/2017/04/25/no1-sicp-notes/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;环境搭建&quot;&gt;&lt;a href=&quot;#环境搭建&quot; class=&quot;headerlink&quot; title=&quot;环境搭建&quot;&gt;&lt;/a&gt;环境搭建&lt;/h3&gt;&lt;p&gt;我使用的环境是DrRacket，安装好Racket后，打开主菜单”File”，找到”Package Manager…”，在”DO What I Mean”中输入”sicp”，导入sicp包。写Scheme程序时，首行写上”#lang sicp”。&lt;br&gt;
    
    </summary>
    
      <category term="阅读" scheme="http://dukeluo.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="MIT" scheme="http://dukeluo.github.io/tags/MIT/"/>
    
      <category term="读书笔记" scheme="http://dukeluo.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="SICP" scheme="http://dukeluo.github.io/tags/SICP/"/>
    
      <category term="scheme" scheme="http://dukeluo.github.io/tags/scheme/"/>
    
  </entry>
  
  <entry>
    <title>图片转化成字符画</title>
    <link href="http://dukeluo.github.io/2017/04/22/asciiImg/"/>
    <id>http://dukeluo.github.io/2017/04/22/asciiImg/</id>
    <published>2017-04-21T16:00:00.000Z</published>
    <updated>2017-04-22T10:40:51.581Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p>先上效果图<br><img src="http://oonjkyvrf.bkt.clouddn.com/starsets/asciiImg/asciiImg.jpg" alt=""></p>
<hr>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>不到50行代码，搞定一张图片转化成字符画！<br>这个功能的实现，主要依赖python的PIL库，进行图像处理，依靠argparse库，处理命令行参数，进行一些参数设定。<br>关键是将灰度映射至字符上。通过灰度公式，将RGB色转化成灰度，然后在映射至字符上，字符的顺序可自己调整。getpixel((x,y))拿到一个点的像素，通常返回(r,g,b)，若是png格式图片，则返回(r,g,b,a)，包含alpha通道信息。<br>这个项目初次接触到标准库中的命令行解析模块argparse，可以很好地编写友好的命令行接口。定义好参数，argparse可以自动地生成帮助和使用信息，输入非法参数时产生错误信息。</p>
<p>附上地址：<a href="https://github.com/DukeLuo/starSets/tree/master/asciipicture" target="_blank" rel="external">传送门</a></p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://oonjkyvrf.bkt.clouddn.com/cc.png" alt=""></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5 中国大陆许可协议</a>进行许可。<br>本文首发于<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>。欢迎转载，但转载请注明来自<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。  </p>
<p>本文永久链接：<a href="http://dukeluo.github.io/2017/04/22/asciiImg/">http://dukeluo.github.io/2017/04/22/asciiImg/</a></p>
]]></content>
    
    <summary type="html">
    
      不到50行代码，搞定一张图片转化成字符画！
    
    </summary>
    
      <category term="编程语言" scheme="http://dukeluo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="python" scheme="http://dukeluo.github.io/tags/python/"/>
    
      <category term="小项目" scheme="http://dukeluo.github.io/tags/%E5%B0%8F%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Let&#39;s begin</title>
    <link href="http://dukeluo.github.io/2017/04/19/begin/"/>
    <id>http://dukeluo.github.io/2017/04/19/begin/</id>
    <published>2017-04-18T16:00:00.000Z</published>
    <updated>2017-04-20T16:30:13.501Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p><strong>首先，对萧大的编程入门指南一万个感谢！</strong>通过程序设计课程接触到C语言，便慢慢地迷上了0和1的世界，从此，在撸代码的道路上愈行愈远…  </p>
<a id="more"></a>  
<p>去年，偶然发现了萧大的编程指南，当时第一感觉，“ **，内容这么多，大部分还是英文材料，普通人能学嘛…”不过，经过短暂的犹豫后，便说服自己按照这份教程学习。那时，面对编程空有兴趣，什么都不会，什么都需要学，却不知何处下手。<br>记得当时下定决心后，竟有肾上激素分泌增加，心跳加速，脸红激动…</p>
<hr>
<h4 id="启蒙"><a href="#启蒙" class="headerlink" title="启蒙"></a>启蒙</h4><p>距离做出决定也有一段时间了，现今已完成MIT的6.00.1x课程与跟完廖雪峰python教程除实战部分。考虑到自己曾上过HIT的计算机导论，就没有完整地完成CS50课程，好像有些慢…<br>现在，纵向对比，从对CS了解的几乎为零，到如今完成了扫盲教育，对CS有了总体的感知。完成6.00.1x和教程后，积累了一定的代码量，对编程有了一些认知。在学习python的过程中，不认识的函数常需要自己查找文档，文档阅读能力也有了提高。</p>
<p><img src="http://oonjkyvrf.bkt.clouddn.com/first.png" alt=""></p>
<hr>
<h4 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h4><p>按照指南，下一步便是指南中的关键点SICP。SICP是MIT多年的教材，包含如何构造计算机程序的魔法。拿到英文复印书籍时，“ **，好重…”哈哈，沉淀的都是知识。首先寄语自己，征服它!<br>跟完教程后，掌握了python的基本语法规则，计划在啃SICP的同时，通过一些小项目来不断锤炼。</p>
<p><img src="http://oonjkyvrf.bkt.clouddn.com/second.png" alt=""></p>
<hr>
<h4 id="有话说"><a href="#有话说" class="headerlink" title="有话说"></a>有话说</h4><p><strong><em>Aim for the moon.If you miss,you may hit a star.</em></strong> —W.Clement Stone</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;首先，对萧大的编程入门指南一万个感谢！&lt;/strong&gt;通过程序设计课程接触到C语言，便慢慢地迷上了0和1的世界，从此，在撸代码的道路上愈行愈远…  &lt;/p&gt;
    
    </summary>
    
      <category term="总结" scheme="http://dukeluo.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="读书笔记" scheme="http://dukeluo.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>python字符串编码</title>
    <link href="http://dukeluo.github.io/2017/04/09/python-string/"/>
    <id>http://dukeluo.github.io/2017/04/09/python-string/</id>
    <published>2017-04-08T16:00:00.000Z</published>
    <updated>2017-04-20T15:50:58.309Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h4 id="Unicode-·-UTF-8"><a href="#Unicode-·-UTF-8" class="headerlink" title="Unicode · UTF-8"></a>Unicode · UTF-8</h4><p>传统的字符编码方案，并无统一的标准，在多语言混合文本，常常会产生冲突。Unicode便是为了解决传统字符编码方案的局限而产生的。Unicode最常用的是用两个字节表示一个字符。现代操作系统和大多编程语言都支持Unicode。处理英文时，用Unicode编码比ASCII编码要多出一倍的储存空间，于是就出现了UTF-8编码。UTF-8采用一种变长的编码方式，根据不同的数字大小编码成1-6个字节。常用的英文字母被编码成1个字节，汉字通常是3个字节。从unicode到uft-8并不是直接的对应，而是要过一些算法和规则来转换。</p>
<hr>
<h4 id="python的字符串编码"><a href="#python的字符串编码" class="headerlink" title="python的字符串编码"></a>python的字符串编码</h4><p>Python 2.7 默认的编码方式是 ASCII，即当直接使用<code>&#39;&#39;</code>、<code>&quot;&quot;</code>或者<code>&#39;&#39;&#39; &#39;&#39;&#39;</code>来定义字符串时，采用的是 ASCII 的编码方式。定义Unicode 字符串则需要在前面添加u。字符串<code>&#39;xxx&#39;</code>虽然是ASCII编码，但也可以看成是UTF-8编码，而<code>u&#39;xxx&#39;</code>则只能是Unicode编码。<br>Python 3.x 字符串默认的编码方式为 Unicode，即<code>&#39;string&#39;</code>和<code>u&#39;string&#39;</code>等价。若要定义 ASCII 编码的字符串需在字符串前加b。</p>
<hr>
<h4 id="encode-·-decode"><a href="#encode-·-decode" class="headerlink" title="encode() · decode()"></a>encode() · decode()</h4><p>在操作字符串时，为避免乱码，通常需要以unicode作为中间编码，即先将其他编码的字符串解码（decode）成unicode，再从unicode编码（encode）成另一种编码。<br>decode的作用是将其他编码的字符串转换成unicode编码，如<code>str1.decode(&#39;gb2312&#39;)</code>，表示将gb2312编码的字符串str1转换成unicode编码。<br>encode的作用是将unicode编码转换成其他编码的字符串，如<code>str2.encode(&#39;utf-8&#39;)</code>,表示将unicode编码的字符串str2转换成utf-8编码。</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://oonjkyvrf.bkt.clouddn.com/cc.png" alt=""></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5 中国大陆许可协议</a>进行许可。<br>本文首发于<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>。欢迎转载，但转载请注明来自<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。  </p>
<p>本文永久链接：<a href="http://dukeluo.github.io/2017/04/09/python-string/">http://dukeluo.github.io/2017/04/09/python-string/</a></p>
]]></content>
    
    <summary type="html">
    
      关于python字符串编码的一些理解
    
    </summary>
    
      <category term="编程语言" scheme="http://dukeluo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="python" scheme="http://dukeluo.github.io/tags/python/"/>
    
      <category term="读书笔记" scheme="http://dukeluo.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.00.1x  计算机科学和Python编程导论  Set 7</title>
    <link href="http://dukeluo.github.io/2017/03/31/MIT-6.00.1x-Set7/"/>
    <id>http://dukeluo.github.io/2017/03/31/MIT-6.00.1x-Set7/</id>
    <published>2017-03-30T16:00:00.000Z</published>
    <updated>2017-04-20T15:36:09.792Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="Part-I-Data-Structure-Design"><a href="#Part-I-Data-Structure-Design" class="headerlink" title="Part I: Data Structure Design"></a>Part I: Data Structure Design</h3><blockquote>
<p>感谢 glhezjnucn 童鞋的给力翻译<br>First, let’s talk about one specific RSS feed: Google News. The URL for the Google News feed is: 首先我们讨论一个特定的RSS推送:Google新闻。链接如下<br><a href="http://news.google.com/?output=rss" target="_blank" rel="external">http://news.google.com/?output=rss</a><br>If you try to load this URL in your browser, you’ll probably see your browser’s interpretation of the XML code generated by the feed. You can view the XML source with your browser’s “View Page Source” function, though it probably will not make much sense to you. Abstractly, whenever you connect to the Google News RSS feed, you receive a list of items. Each entry in this list represents a single news item. In a Google News feed, every entry has the following fields:<br>如果你用浏览器打开这个网址，那么你的浏览器会将XML生成为页面反馈信息，你可以用查看源代码的功能看XML的源码，不过这也许没多大帮助。 简略的说，当你链接一个Google 新闻RSS推送时，你会得到一个项目列表，每个条目表示一条单一的新闻，在Google新闻条目里，含有以下信息：</p>
<ul>
<li>guid : A globally unique identifier for this news story. 全局唯一的新闻条目的识别号</li>
<li>title : The news story’s headline. 新闻条目的标题</li>
<li>subject : A subject tag for this story (e.g. ‘Top Stories’, or ‘Sports’). 新闻条目的主题(比如 ‘Top Stories’, 或 ‘Sports’).</li>
<li>summary : A paragraph or so summarizing the news story.新闻条目的概要或段落ry.</li>
<li>link : A link to a web-site with the entire story. 新闻条目的完整链接网址</li>
</ul>
<h4 id="Generalizing-the-Problem-问题的一般化"><a href="#Generalizing-the-Problem-问题的一般化" class="headerlink" title="Generalizing the Problem 问题的一般化"></a>Generalizing the Problem 问题的一般化</h4><p>This is a little trickier than we’d like it to be, because each of these RSS feeds is structured a little bit differently than the others. So, our goal in Part I is to come up with a unified, standard representation that we’ll use to store a news story.<br>比我们希望的要棘手一点，每个RSS推送器可能在信息组织格式上不太一样。因此，第一部分我们的目标是统一，标准化存储新闻条目。<br>Why do we want this? When all is said and done, we want an application that aggregates several RSS feeds from various sources and can act on all of them in the exact same way: we should be able to read news stories from various RSS feeds all in one place. If you’ve ever used an RSS feed reader, be assured that it has had to solve the exact problem we’re going to tackle in this pset!<br>为什么需要这样？当我们完成了这样的统一，我们的应用程序可以对聚集一起的多个RSS推送器看成完全是同一个。也就是我们在一个地方就可以阅读来自不同RSS推送器的新闻条目。要是你用过RSS阅读器，那就会相信它首先就要解决我们所面临的一模一样的问题。</p>
<h4 id="Problem-1"><a href="#Problem-1" class="headerlink" title="Problem 1"></a>Problem 1</h4><p>Parsing is the process of turning a data stream into a structured format that is more convenient to work with. We have provided you with code that will retrieve and parse the Google and Yahoo news feeds. 分列（parse语句）是处理数据流使之成为结构化格式，更适于工作的过程。我们已经为你提供了获取与分列Google, Yahoo新闻推送的代码。<br>Parsing all of this information from the feeds that Google/Yahoo/the New York Times/etc. gives us is no small feat. So, let’s tackle an easy part of the problem first: Pretend that someone has already done the specific parsing, and has left you with variables that contain the following information for a news story:<br>获取与分列来自Google/Yahoo/the New York Times等等的信息并非易事。因此让我们先来对付一个简单的部分问题：就像别人已经为我们做了这些提取与分列的工作，留给你的是关于新闻条目的如下信息：</p>
<ul>
<li>globally unique identifier (GUID) - a string that serves as a unique name for this entry 条目的唯一识别字符串</li>
<li>title - a string 字符串</li>
<li>subject - a string 字符串</li>
<li>summary - a string 字符串</li>
<li>link to more content - a string 字符串</li>
</ul>
<p>We want to store this information in an object that we can then pass around in the rest of our program. Your task, in this problem, is to write a class, NewsStory, starting with a constructor that takes (guid, title, subject, summary, link) as arguments and stores them appropriately. NewsStory also needs to contain the following methods:<br>我们希望用对象来存储这些信息，然后可以将它传给程序的其他地方。你的任务是写一个class, NewsStory，以(guid, title, subject, summary, link)作为参数的一个构造器，并将它们合理的存储，NewsStory也需要如下方法</p>
<ul>
<li><code>getGuid(self)</code></li>
<li><code>getTitle(self)</code></li>
<li><code>getSubject(self)</code></li>
<li><code>getSummary(self)</code></li>
<li><code>getLink(self)</code></li>
</ul>
<p>Each method should return the appropriate element of an instance. For example, if we have implemented the class and call<br><code>test = NewsStory(&#39;foo&#39;, &#39;myTitle&#39;, &#39;mySubject&#39;, &#39;some long summary&#39;, &#39;www.example.com&#39;)</code><br>每个方法需要能返回实例的对应元素，例如，当我们实现了class定义，调用<br>then test.getGuid() will return foo.<br>The solution to this problem should be relatively short and very straightforward (please review what get methods should do if you find yourself writing multiple lines of code for each). Once you have implemented NewsStory all the NewsStory test cases should work.<br>对这个问题的解答应该是相对简短而非常直接的。当你实现了NewsStrory,那所有的NewssTory测试都应该通过。<br>To test your class definition, we have provided a test suite in ps7_test.py. You can test your code by loading and running this file. You should see an “OK” for the NewsStory tests if your code is correct. Because ps7.py contains code to run the full RSS scraping system, we suggest you do not try to run ps7.py directly to test your implementation. Instead, in IDLE, you can do the following:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> ps7 <span class="keyword">import</span> *</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>test = ps7.NewsStory(<span class="string">'foo'</span>, <span class="string">'myTitle'</span>, <span class="string">'mySubject'</span>, <span class="string">'some long summary'</span>, <span class="string">'www.example.com'</span>)</span><br></pre></td></tr></table></figure>
<p>to load in then run your own tests on your class definitions.<br>为测试你的class定义，我们在ps7_test.py中提供了测试集。你可以装入运行那个程序来测试你的代码。如果你的代码正确，应该看到NewssTory测试OK这样的信息，我们提议你不直接运行ps7.py来测试你的实现。而是，在IDLE环境用下列代码来测试：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enter your code for NewsStory in this box</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsStory</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,guid,title,subject,summary,link)</span>:</span></span><br><span class="line">        self.guid = guid</span><br><span class="line">        self.title = title</span><br><span class="line">        self.subject = subject</span><br><span class="line">        self.summary = summary</span><br><span class="line">        self.link = link</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getGuid</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.guid</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getTitle</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSubject</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.subject</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getSummary</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.summary</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getLink</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.link</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Part-II-Word-Triggers"><a href="#Part-II-Word-Triggers" class="headerlink" title="Part II: Word Triggers"></a>Part II: Word Triggers</h3><blockquote>
<p>Given a set of news stories, your program will generate alerts for a subset of those stories. Stories with alerts will be displayed to the user, and the other stories will be silently discarded. We will represent alerting rules as triggers. A trigger is a rule that is evaluated over a single news story and may fire to generate an alert. For example, a simple trigger could fire for every news story whose title contained the word “Microsoft”. Another trigger may be set up to fire for all news stories where the summary contained the word “Boston”. Finally, a more specific trigger could be set up to fire only when a news story contained both the words “Microsoft” and “Boston” in the summary.<br>给定一组新闻条目，你的程序需要为一个子集生成通知（alerts）,附带alert的条目将显示给用户，而其他就无声地丢弃。 我们将用触发器来表示通知规则。一个触发器是用于评估单一的新闻条目是否需要被通知的规则。比如，一个简单的触发器可能是触发所有在title中含有单词”Microsoft”的新闻条目，另一个触发器可能是触发在summary中含有单词”Boston”的新闻条目。而进一步的特定触发器可能触发在summary中同时含有这两个单词的。<br>In order to simplify our code, we will use object polymorphism. We will define a trigger interface and then implement a number of different classes that implement that trigger interface in different ways.<br>为了简化我们的代码，我们采用对象的多态性，我们定义一个触发器界面，然后定义一系列不同的类来以不同的形式实现触发器界面。</p>
<h4 id="Trigger-interface-触发器界面"><a href="#Trigger-interface-触发器界面" class="headerlink" title="Trigger interface 触发器界面"></a>Trigger interface 触发器界面</h4><p>Each trigger class you define should implement the following interface, either directly or transitively. It must implement the evaluate method that takes a news item (NewsStory object) as an input and returns True if an alert should be generated for that item. We will not directly use the implementation of the Trigger class, which is why it throws an exception should anyone attempt to use it<br>你定义的每个触发器类应该直接或间接地实现如下界面。它必须实现evaluate方法，接收新闻条目输入(NewsStory类)，如果该条目需要通知就返回True.我们不直接用Trigger类里定义的evaluate,这就是为什么那里写了如果被引用的话就产生一个exception出错。<br>The class below implements the Trigger interface (you will not modify this). Any subclass that inherits from it will have an evaluate method. By default, they will use the evaluate method in Trigger, the superclass, unless they define their own evaluate function, which would then be used instead. If some subclass neglects to define its own evaluate() method, calls to it will go to Trigger.evaluate(), which fails (albeit cleanly) with the NotImplementedError exception:<br>下面的类定义实现触发器界面(你不要修改它).每个继承它的子类都需要有一个evaluate 方法. 缺省地，子类会引用Trigger类的evaluate方法，除非它定义了自己的evaluate,那么它将取代继承来的方法. 如果一些子类忽略了定义自己的evaluate()方法,那么对它的调用将转向Trigger.evaluate(), 这会失败 ，产生一个NotImplementedError例外:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Trigger</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self, story)</span>:</span></span><br><span class="line">        <span class="string">"""</span><br><span class="line">        Returns True if an alert should be generated</span><br><span class="line">        for the given news item, or False otherwise.</span><br><span class="line">        """</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError</span><br></pre></td></tr></table></figure></p>
<p>We will define a number of classes that inherit from Trigger. In the figure below, Trigger is a superclass, which all other classes inherit from. The arrow from WordTrigger to Trigger means that WordTrigger inherits from Trigger - a WordTrigger is a Trigger . Note that other classes inherit from WordTrigger.<br>我们将从Trigger类继承来定义一系列的子类。如下图所示（图请见原文），Trigger是超类，所有其他类继承它，WordTrigger继承Trigger,其他类又继承WordTrigger. （Trigger结构图略）<br><img src="http://www.xuetangx.com/asset-v1:MITx+6_00_1x+sp+type@asset+block/files_ps06_files_trigger_inheritance_large.png" alt=""></p>
<h4 id="Whole-Word-Triggers-完整单词触发器"><a href="#Whole-Word-Triggers-完整单词触发器" class="headerlink" title="Whole Word Triggers 完整单词触发器"></a>Whole Word Triggers 完整单词触发器</h4><p>Having a trigger that always fires isn’t interesting; let’s write some that are. A user may want to be alerted about news items that contain specific words. For instance, a simple trigger could fire for every news item whose title contains the word “Microsoft”. In the following problems, you will create a WordTrigger abstract class and implement three classes that inherit from this class.<br>我们对一个一直激发的触发器可能不感兴趣，我们要写一些有用的。用户可能对包含特定单词的新闻感兴趣，希望被通知。比如，一个简单的触发器可能是触发所有在title中含有单词”Microsoft”的新闻条目。在下面的问题，我们建立一个抽象类WordTrigger,然后继承它设计3个子类。<br>The trigger should fire when the whole word is present. For example, a trigger for “soft” should fire on: 当完整单词出现的时候，触发器应该被触发（激活），例如对单词”soft”的触发器应该就下列情形激活（激发）</p>
<ul>
<li>Koala bears are soft and cuddly.</li>
<li>I prefer pillows that are soft.</li>
<li>Soft drinks are great.</li>
<li>Soft’s the new pink!</li>
<li>“Soft!” he exclaimed as he threw the football.</li>
</ul>
<p>But should not fire on: 但下列情形却不被激活（激发） </p>
<ul>
<li>Microsoft recently released the Windows 8 Consumer Preview.</li>
<li>Downey makes my clothes the softest they can be!</li>
</ul>
<p>This is a little tricky, especially the case with the apostrophe. For the purpose of your parsing, pretend that a space or any character in string.punctuation is a word separator. If you’ve never seen string.punctuation before, go to your interpreter and type: 这稍微有点棘手，尤其是有撇号的时候。在你分列词句时，可以认为空格或string.punctuation中的字符都是单词的分隔符。如果你从未看过string.punctuation，到解释器输入下面代码:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> string.punctuation</span><br></pre></td></tr></table></figure>
<p>Play around with this a bit to get comfortable with what it is.对它进行操作以便熟悉它，在这一部分，字符串的split与replace方法将有助于你解决问题。 同样你也可能用到lower或upper方法 The split and replace methods of strings will almost certainly be helpful as you tackle this part.<br>You may also find the string methods lower and/or upper useful for this problem.</p>
<h4 id="Problem-2"><a href="#Problem-2" class="headerlink" title="Problem 2"></a>Problem 2</h4><p>Implement a word trigger abstract class, WordTrigger. It should take in a string word as an argument to the class’s constructor.<br>设计单词触发器抽象类WordTrigger.<br>WordTrigger should be a subclass of Trigger. It has one new method, isWordIn, which takes in one string argument text. It returns True if the whole word word is present in text, False otherwise, as described in the above examples. This method should not be case-sensitive. Implement this method.<br>作为类构造的参数它接受一个单词字符串。 WordTrigger 必须是Trigger的子类. 它有一个新的方法isWordIn,它接收一个字符串参数text. 如果整个word含在text中返回True,否则返回False.这个方法不能对大小写敏感，实现它。<br>Because this is an abstract class, we will not be directly instantiating any WordTriggers. WordTrigger should inherit its evaluate method from Trigger. We do this because now we can create subclasses of WordTrigger that use its isWordIn method. In this way, it is much like the Trigger interface, except now actual code from this WordTrigger class is used in its subclasses.<br>因为它是一个抽象类，我们不直接实例化WordTrigger. WordTrigger需从Trigger继承evaluate方法。我们这么做是为了进一步定义WordTrigger的子类，而这些子类将继承它的isWordIn方法。因此它更像Trigger界面，只不过它的实际代码是在它的子类里调用。</p>
<h4 id="Problem-3"><a href="#Problem-3" class="headerlink" title="Problem 3"></a>Problem 3</h4><p>You are now ready to implement WordTrigger’s three subclasses: TitleTrigger, SubjectTrigger, and SummaryTrigger.<br>现在你可以开始设计WordTrigger的三个子类了: TitleTrigger, SubjectTrigger, 以及 SummaryTrigger.<br>Implement a word trigger class, TitleTrigger, that fires when a news item’s title contains a given word. The word should be an argument to the class’s constructor. This trigger should not be case-sensitive (it should treat “Intel” and “intel” as being equal).<br>设计单词触发器类TitleTrigger, 它激发新闻 title 中含有特定单词.单词作为类构造的参数，这个触发器也不分大小写(它对”Intel” 与”intel” 视为相等).<br>For example, an instance of this type of trigger could be used to generate an alert whenever the word “Intel” occurred in the title of a news item. Another instance could generate an alert whenever the word “Microsoft” occurred in the title of an item.<br>比如这个触发器类的一个实例可以激发title中含有单词”Intel”的新闻，而另一个实例可以激发title中含有”Microsoft”的新闻。<br>Think carefully about what methods should be defined in TitleTrigger and what methods should be inherited from the superclass. This class can be implemented in as few as 3 lines code!<br>考虑仔细，在TitleTrigger中该定义什么方法，又什么方法继承自它的超类。这个类的定义只须少于3行的代码来做。</p>
<h4 id="Problem-4"><a href="#Problem-4" class="headerlink" title="Problem 4"></a>Problem 4</h4><p>Implement a word trigger class, SubjectTrigger, that fires when a news item’s subject contains a given word. The word should be an argument to the class’s constructor. This trigger should not be case-sensitive.<br>设计单词触发器类SubjectTrigger, 它激发新闻 subject 中含有特定单词.单词作为类构造的参数，这个触发器也不分大小写.</p>
<h4 id="Problem-5"><a href="#Problem-5" class="headerlink" title="Problem 5"></a>Problem 5</h4><p>Implement a word trigger class, SummaryTrigger, that fires when a news item’s summary contains a given word. The word should be an argument to the class’s constructor. This trigger should not be case-sensitive.<br>设计单词触发器类SummaryTrigger, 它激发新闻 summary 中含有特定单词.单词作为类构造的参数，这个触发器也不分大小写.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enter your code for WordTrigger, TitleTrigger, </span></span><br><span class="line"><span class="comment"># SubjectTrigger, and SummaryTrigger in this box</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordTrigger</span><span class="params">(Trigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,word)</span>:</span></span><br><span class="line">        self.word = word</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isWordIn</span><span class="params">(self,text)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> text:</span><br><span class="line">            <span class="keyword">if</span> letter <span class="keyword">in</span> string.punctuation:</span><br><span class="line">                text = text.replace(letter,<span class="string">' '</span>)</span><br><span class="line">        wordList = string.lower(text).split(<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">return</span> string.lower(self.word) <span class="keyword">in</span> wordList</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleTrigger</span><span class="params">(WordTrigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,word)</span>:</span></span><br><span class="line">        WordTrigger.__init__(self,word)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self,story)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.isWordIn(story.getTitle())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubjectTrigger</span><span class="params">(WordTrigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,word)</span>:</span></span><br><span class="line">        WordTrigger.__init__(self,word)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self,story)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.isWordIn(story.getSubject())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SummaryTrigger</span><span class="params">(WordTrigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,word)</span>:</span></span><br><span class="line">        WordTrigger.__init__(self,word)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self,story)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.isWordIn(story.getSummary())</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Part-II-Composite-Triggers"><a href="#Part-II-Composite-Triggers" class="headerlink" title="Part II: Composite Triggers"></a>Part II: Composite Triggers</h3><blockquote>
<h4 id="Composite-Triggers-复合触发器"><a href="#Composite-Triggers-复合触发器" class="headerlink" title="Composite Triggers 复合触发器"></a>Composite Triggers 复合触发器</h4><p>So the triggers from the previous page are mildly interesting, but we want to do better: we want to ‘compose’ the earlier triggers, to set up more powerful alert rules. For instance, we may want to raise an alert only when both “google” and “stock” were present in the news item (an idea we can’t express right now).<br>前面的触发器已经有点意思了，不过我们可以做得更好：我们将复合以前的触发器，来建立更为强大的通知准则。比如我们希望当新闻条目中同时含有”google” 和 “stock”时获得通知提醒（这一点我们现在还无法表达）。<br>Note that these triggers are not word triggers and should not be subclasses of WordTrigger.<br>注意这类触发器并非单词触发器，因此它不是WordTrigger的子类。</p>
<h4 id="Problem-6"><a href="#Problem-6" class="headerlink" title="Problem 6"></a>Problem 6</h4><p>Implement a NOT trigger (NotTrigger). 设计NotTrigger<br>This trigger should produce its output by inverting the output of another trigger. The NOT trigger should take this other trigger as an argument to its constructor. (Why its constructor? Because we can’t change what parameters evaluate takes in… that’d break our polymorphism). So, given a trigger T and a news item x, the output of the NOT trigger’s evaluate method should be equivalent to not T.evaluate(x).<br>这个触发器需要将别的触发器进行翻转输出。输入一个触发器对象作为参数，因此给定trigger T,新闻x,它的输出等效于 not T.evaluate(x).</p>
<h4 id="Problem-7"><a href="#Problem-7" class="headerlink" title="Problem 7"></a>Problem 7</h4><p>Implement an AND trigger (AndTrigger).设计AndTrigger<br>This trigger should take two triggers as arguments to its constructor, and should fire on a news story only if both of the inputted triggers would fire on that item.</p>
<h4 id="Problem-8"><a href="#Problem-8" class="headerlink" title="Problem 8"></a>Problem 8</h4><p>Implement an OR trigger (OrTrigger).<br>This trigger should take two triggers as arguments to its constructor, and should fire if either one (or both) of its inputted triggers would fire on that item.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enter your code for WordTrigger, TitleTrigger,</span></span><br><span class="line"><span class="comment"># NotTrigger, AndTrigger, and OrTrigger in this box</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordTrigger</span><span class="params">(Trigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,word)</span>:</span></span><br><span class="line">        self.word = word</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isWordIn</span><span class="params">(self,text)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> text:</span><br><span class="line">            <span class="keyword">if</span> letter <span class="keyword">in</span> string.punctuation:</span><br><span class="line">                text = text.replace(letter,<span class="string">' '</span>)</span><br><span class="line">        wordList = string.lower(text).split(<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">return</span> string.lower(self.word) <span class="keyword">in</span> wordList</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleTrigger</span><span class="params">(WordTrigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,word)</span>:</span></span><br><span class="line">        WordTrigger.__init__(self,word)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self,story)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.isWordIn(story.getTitle())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotTrigger</span><span class="params">(Trigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,trigger)</span>:</span></span><br><span class="line">        self.trigger = trigger</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self,story)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">not</span> self.trigger.evaluate(story)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AndTrigger</span><span class="params">(Trigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,trigger1,trigger2)</span>:</span></span><br><span class="line">        self.trigger1 = trigger1</span><br><span class="line">        self.trigger2 = trigger2</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self,story)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.trigger1.evaluate(story) <span class="keyword">and</span> self.trigger2.evaluate(story)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrTrigger</span><span class="params">(Trigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,trigger1,trigger2)</span>:</span></span><br><span class="line">        self.trigger1 = trigger1</span><br><span class="line">        self.trigger2 = trigger2</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self,story)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.trigger1.evaluate(story) <span class="keyword">or</span> self.trigger2.evaluate(story)</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Part-II-Phrase-Triggers"><a href="#Part-II-Phrase-Triggers" class="headerlink" title="Part II: Phrase Triggers"></a>Part II: Phrase Triggers</h3><blockquote>
<h4 id="Phrase-Triggers-短语触发器"><a href="#Phrase-Triggers-短语触发器" class="headerlink" title="Phrase Triggers 短语触发器"></a>Phrase Triggers 短语触发器</h4><p>At this point, you have no way of writing a trigger that matches on “New York City” – the only triggers you know how to write would be a trigger that would fire on “New” AND “York” AND “City” – which also fires on the phrase “New students at York University love the city”. It’s time to fix this. Since here you’re asking for an exact match, we will require that the cases match, but we’ll be a little more flexible on word matching. So, “New York City” will match:<br>现在我们还没有办法写一个触发器来匹配查找短语 “New York City” – 你能写的触发器可能会是”New” ， “York” ， “City”作为单词触发器复合 – 但这样就会触发短语 “New students at York University love the city”. 这需要修正，因为我们需要你精确匹配，我们也需要区分大小，但在单词匹配上有一点灵活性 因此, “New York City” 能匹配如下:</p>
<ul>
<li>New York City sees movie premiere</li>
<li>In the heart of New York City’s famous cafe</li>
<li>New York Cityrandomtexttoproveapointhere</li>
</ul>
<p>but will not match: 但不匹配下面的</p>
<ul>
<li>I love new york city</li>
<li>I love    New                 York                  City!!!!!!!!!!!!!!</li>
</ul>
<h4 id="Problem-9"><a href="#Problem-9" class="headerlink" title="Problem 9"></a>Problem 9</h4><p>Implement a phrase trigger (PhraseTrigger) that fires when a given phrase is in any of the story’s subject, title, or summary. The phrase should be an argument to the class’s constructor. You may find the Python operator in helpful, as in:<br>设计短语触发器(PhraseTrigger)，当 新闻条目的subject, title, or summary 中任意一个含有该短语就会激发。短语需是类构建器的参数，你会发现Python的一下操作运算是有用的。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"New York City"</span> <span class="keyword">in</span> <span class="string">"In the heart of New York City's famous cafe"</span></span><br><span class="line"><span class="keyword">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> <span class="string">"New York City"</span> <span class="keyword">in</span> <span class="string">"I love new york city"</span></span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enter your code for WordTrigger, TitleTrigger,</span></span><br><span class="line"><span class="comment"># SubjectTrigger, SummaryTrigger, and PhraseTrigger in this box</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordTrigger</span><span class="params">(Trigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,word)</span>:</span></span><br><span class="line">        self.word = word</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isWordIn</span><span class="params">(self,text)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> text:</span><br><span class="line">            <span class="keyword">if</span> letter <span class="keyword">in</span> string.punctuation:</span><br><span class="line">                text = text.replace(letter,<span class="string">' '</span>)</span><br><span class="line">        wordList = string.lower(text).split(<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">return</span> string.lower(self.word) <span class="keyword">in</span> wordList</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleTrigger</span><span class="params">(WordTrigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,word)</span>:</span></span><br><span class="line">        WordTrigger.__init__(self,word)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self,story)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.isWordIn(story.getTitle())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubjectTrigger</span><span class="params">(WordTrigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,word)</span>:</span></span><br><span class="line">        WordTrigger.__init__(self,word)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self,story)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.isWordIn(story.getSubject())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SummaryTrigger</span><span class="params">(WordTrigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,word)</span>:</span></span><br><span class="line">        WordTrigger.__init__(self,word)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self,story)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.isWordIn(story.getSummary())</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhraseTrigger</span><span class="params">(Trigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,phrase)</span>:</span></span><br><span class="line">        self.phrase = phrase</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self,story)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.phrase <span class="keyword">in</span> story.getTitle() <span class="keyword">or</span> self.phrase <span class="keyword">in</span> story.getSubject() <span class="keyword">or</span> self.phrase <span class="keyword">in</span> story.getSummary()</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Part-III-Filtering-过滤"><a href="#Part-III-Filtering-过滤" class="headerlink" title="Part III: Filtering 过滤"></a>Part III: Filtering 过滤</h3><blockquote>
<p>At this point, you can run ps7.py, and it will fetch and display Google and Yahoo news items for you in little pop-up windows. How many news items? All of them.现在你运行ps7.py,它会获取并以弹出窗口显示来自Google / Yahoo 的新闻条目，有多少呢？<br>Right now, the code we’ve given you in ps7.py gets all of the feeds every minute, and displays the result. This is nice, but, remember, the goal here was to filter out only the the stories we wanted.<br>所有. 现在, 我们在 ps7.py的代码每隔一分钟去提取显示一次，这挺不错，但记住，我们这里的目标是要设计一些过滤。</p>
<h4 id="Problem-10"><a href="#Problem-10" class="headerlink" title="Problem 10"></a>Problem 10</h4><p>Write a function, filterStories(stories, triggerlist) that takes in a list of news stories and a list of triggers, and returns a list of only the stories for which any of the triggers fires on. The list of stories should be unique - that is, do not include any duplicates in the list. For example, if 2 triggers fire on StoryA, only include StoryA in the list one time.<br>After completing Problem 10, run the file ps7_test.py. All the tests should now pass.<br>编写函数filterStories(stories, triggerlist)，以参数输入新闻列表与触发器列表，返回任何触发器为True的新闻子集，新闻子集不该含有重复的条目。也就是说如果有2个触发器同时触发新闻StoryA,返回中指含一次StoryA 完成了Problem 10, 运行文件 ps7_test.py，应该通过全部测试.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enter your code for WordTrigger, TitleTrigger,</span></span><br><span class="line"><span class="comment"># SubjectTrigger, SummaryTrigger, PhraseTrigger, and </span></span><br><span class="line"><span class="comment"># filterStories in this box</span></span><br><span class="line"><span class="comment"># Enter your code for WordTrigger, TitleTrigger,</span></span><br><span class="line"><span class="comment"># SubjectTrigger, SummaryTrigger, PhraseTrigger, and </span></span><br><span class="line"><span class="comment"># filterStories in this box</span></span><br><span class="line"><span class="comment"># Enter your code for WordTrigger, TitleTrigger,</span></span><br><span class="line"><span class="comment"># SubjectTrigger, SummaryTrigger, PhraseTrigger, and </span></span><br><span class="line"><span class="comment"># filterStories in this box</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WordTrigger</span><span class="params">(Trigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,word)</span>:</span></span><br><span class="line">        self.word = word</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isWordIn</span><span class="params">(self,text)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> text:</span><br><span class="line">            <span class="keyword">if</span> letter <span class="keyword">in</span> string.punctuation:</span><br><span class="line">                text = text.replace(letter,<span class="string">' '</span>)</span><br><span class="line">        wordList = string.lower(text).split(<span class="string">' '</span>)</span><br><span class="line">        <span class="keyword">return</span> string.lower(self.word) <span class="keyword">in</span> wordList</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TitleTrigger</span><span class="params">(WordTrigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,word)</span>:</span></span><br><span class="line">        WordTrigger.__init__(self,word)</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self,story)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.isWordIn(story.getTitle())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubjectTrigger</span><span class="params">(WordTrigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,word)</span>:</span></span><br><span class="line">        WordTrigger.__init__(self,word)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self,story)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.isWordIn(story.getSubject())</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SummaryTrigger</span><span class="params">(WordTrigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,word)</span>:</span></span><br><span class="line">        WordTrigger.__init__(self,word)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self,story)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.isWordIn(story.getSummary())</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PhraseTrigger</span><span class="params">(Trigger)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,phrase)</span>:</span></span><br><span class="line">        self.phrase = phrase</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self,story)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.phrase <span class="keyword">in</span> story.getTitle() <span class="keyword">or</span> self.phrase <span class="keyword">in</span> story.getSubject() <span class="keyword">or</span> self.phrase <span class="keyword">in</span> story.getSummary()</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filterStories</span><span class="params">(stories, triggerlist)</span>:</span></span><br><span class="line">    storyTriggerList=[]</span><br><span class="line">    <span class="keyword">for</span> story <span class="keyword">in</span> stories:</span><br><span class="line">        <span class="keyword">for</span> trigger <span class="keyword">in</span> triggerlist:</span><br><span class="line">            <span class="keyword">if</span> trigger.evaluate(story):</span><br><span class="line">                storyTriggerList.append(story)</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> storyTriggerList</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Part-IV-User-Specified-Triggers-用户指定触发器"><a href="#Part-IV-User-Specified-Triggers-用户指定触发器" class="headerlink" title="Part IV: User-Specified Triggers 用户指定触发器"></a>Part IV: User-Specified Triggers 用户指定触发器</h3><blockquote>
<p>Right now, your triggers are specified in your Python code, and to change them, you have to edit your program. This is very user-unfriendly. (Imagine if you had to edit the source code of your web browser every time you wanted to add a bookmark!) 至此，你的触发器是指定在Python代码中的，要改变它们，你需要修改代码，这是非常用户-不友好的(谁想一下如果你想加个书签的话要更改浏览器代码)<br>Instead, we want you to read your trigger configuration from a triggers.txt file every time your application starts, and use the triggers specified there.我们希望运行应用程序时读入触发器配置文件triggers.txt,用那里指定的触发器。<br>Consider the following example trigger configuration file:<br>考虑如下的触发器配置文件：</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"> # subject trigger named t1</span><br><span class="line">t1 SUBJECT world</span><br><span class="line"></span><br><span class="line"># title trigger named t2</span><br><span class="line">t2 TITLE Intel</span><br><span class="line"></span><br><span class="line"># phrase trigger named t3</span><br><span class="line">t3 PHRASE New York City</span><br><span class="line"></span><br><span class="line"># composite trigger named t4</span><br><span class="line">t4 AND t2 t3</span><br><span class="line"></span><br><span class="line"># the trigger set contains t1 and</span><br><span class="line">t4</span><br><span class="line">ADD t1 t4</span><br></pre></td></tr></table></figure>
<blockquote>
<p>The example file specifies that four triggers should be created, and that two of those triggers should be added to the trigger list:<br>例子指定生成4个触发器，其中的两个加载到触发器列表</p>
<ul>
<li>A trigger that fires when a subject contains the word ‘world’ (t1).</li>
<li>A trigger that fires when the title contains the word ‘Intel’ and the news item contains the phrase ‘New York City’ somewhere (t4).</li>
</ul>
<p>The two other triggers (t2 and t3) are created but not added to the trigger set directly. They are used as arguments for the composite AND trigger’s definition (t4).<br>另两个trigger (t2 and t3)建立起来但不直接加到触发器集合<br>Each line in this file does one of the following:</p>
<ul>
<li>is blank</li>
<li>is a comment (begins with a #)</li>
<li>defines a named trigger</li>
<li>adds triggers to the trigger list. 将触发器加到触发器列表</li>
</ul>
<p>Each type of line is described below. 每个行的类型描述如下</p>
<ul>
<li>Blank: blank lines are ignored. A line that consists only of whitespace is a blank line. 可以忽略</li>
<li>Comments: Any line that begins with a # character is ignored.</li>
<li>Trigger definitions: Lines that do not begin with the keyword ADD define named triggers. The first element in a trigger definition is the name of the trigger. The name can be any combination of letters without spaces, except for “ADD”. The second element of a trigger definition is a keyword (e.g., TITLE, PHRASE, etc.) that specifies the kind of trigger being defined. The remaining elements of the definition are the trigger arguments. What arguments are required depends on the trigger type:<br>不以关键词ADD开头的行用来定义一个触发器，第一个成分表示触发器的名称，名称定义是字母的组合（但不能用ADD）。第二成分是描述触发器类型的关键词（TITLE, PHRASE等），余下的是触发器需要的参数.需要什么样的参数取决于触发器的类型:<ul>
<li>TITLE : a single word.单一单词.</li>
<li>SUBJECT : a single word.单一单词.</li>
<li>SUMMARY : a single word.单一单词.</li>
<li>NOT : the name of the trigger that will be NOT’d.触发器名称</li>
<li>AND : the names of the two other triggers that will be AND’d.两个触发器名称</li>
<li>OR : the names of the two other triggers that will be OR’d.t两个触发器名称.</li>
<li>PHRASE : a phrase.一个短语.</li>
</ul>
</li>
<li>Trigger addition: A trigger definition should create a trigger and associate it with a name but should not automatically add that trigger to the running trigger list. One or more ADD lines in the .txt file will specify which triggers should be in the trigger list. An addition line begins with the ADD keyword. Following ADD are the names of one or more previously defined triggers. These triggers will be added to the the trigger list.<br>触发器的定义只是定义一个trigger并给它一个名称，并不直接加入到运行时的触发器列表。一个或多个ADD行才指定将什么trigger添加到运行时触发器列表。跟在ADD后面的是一个或多个前面已定义好的触发器，这些将加入到触发器列表。<h4 id="Problem-11"><a href="#Problem-11" class="headerlink" title="Problem 11"></a>Problem 11</h4>We have implemented the function readTriggerConfig(filename) for you. We’ve written code to open the file and throw away all the lines that don’t begin with instructions (e.g. comments and blank spaces), and then reads in the code that defines triggers and instantiates the triggers by making a call to the helper function makeTrigger. The function readTriggerConfig then returns a list of triggers specified in the configuration file.<br>我们为你写了函数readTriggerConfig(filename)。函数代码会打开trigger.txt文件并丢弃非指令的行，读入指令行并调用makeTrigger函数定义trigger以及trigger实例。<br>First, read through the definition of readTriggerConfig. You should be able to understand everything this function is doing at this point in the course. 首先通读readTriggerConfig函数的定义，在此你应该能完全理解函数的行为。<br>Next, implement the function makeTrigger(triggerMap, triggerType, params, name). This helper function should build and return a trigger depending on its type. It also keeps track of triggers and names in a map. We have defined for you the specifications for this function to make it easier for you to write. Be sure you understand how readTriggerConfig is using this function; that will make implementation easier.<br>然后实现函数makeTrigger(triggerMap, triggerType, params, name)，这个函数实现按trigger的类型(译注：以前定义过的trigger类型)构建并返回一个trigger。而且它会在map中保持对trigger的跟踪(译注：也就是说构建新的trigger后需要将它刷新到trigger词典对照变量)。我们已经为你提供了一些特别指定，让你更容易的写出代码</li>
</ul>
<p>After completing Problem 11, you can try running ps7.py, and depending on how your triggers.txt file is defined, various RSS news items should pop up for easy reading. The code runs an infinite loop, checking the RSS feed for new stories every 60 seconds.完成了问题11，你可以试着运行ps7.py,它将取决于你的trigger.txt配置文件，不同的RSS新闻条目会以便于阅读的方式被推送出来。代码是无限循环的，每隔60秒检测一次RSS新闻条目。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enter your code for makeTrigger in this box</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">makeTrigger</span><span class="params">(triggerMap, triggerType, params, name)</span>:</span></span><br><span class="line">    trigger = <span class="keyword">None</span></span><br><span class="line">    <span class="keyword">if</span> triggerType == <span class="string">'TITLE'</span>:</span><br><span class="line">        trigger = TitleTrigger(params[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> triggerType == <span class="string">'SUBJECT'</span>:</span><br><span class="line">        trigger = SubjectTrigger(params[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> triggerType == <span class="string">'SUMMARY'</span>:</span><br><span class="line">        trigger = SummaryTrigger(params[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">elif</span> triggerType == <span class="string">'NOT'</span>:</span><br><span class="line">        t1 = triggerMap.get(params[<span class="number">0</span>])</span><br><span class="line">        <span class="keyword">if</span> t1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            trigger = NotTrigger(t1)</span><br><span class="line">    <span class="keyword">elif</span> triggerType == <span class="string">'AND'</span>:</span><br><span class="line">        t1 = triggerMap.get(params[<span class="number">0</span>])</span><br><span class="line">        t2 = triggerMap.get(params[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> t1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> t2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            trigger = AndTrigger(t1,t2)</span><br><span class="line">    <span class="keyword">elif</span> triggerType == <span class="string">'OR'</span>:</span><br><span class="line">        t1 = triggerMap.get(params[<span class="number">0</span>])</span><br><span class="line">        t2 = triggerMap.get(params[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">if</span> t1 <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> t2 <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            trigger = OrTrigger(t1,t2)</span><br><span class="line">    <span class="keyword">elif</span> triggerType == <span class="string">'PHRASE'</span>:</span><br><span class="line">        trigger = PhraseTrigger(string.join(params,<span class="string">' '</span>))</span><br><span class="line">    <span class="keyword">if</span> trigger <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span> <span class="keyword">and</span> name <span class="keyword">not</span> <span class="keyword">in</span> triggerMap.keys():</span><br><span class="line">        triggerMap[name] = trigger</span><br><span class="line">    <span class="keyword">return</span> trigger</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="有话说"><a href="#有话说" class="headerlink" title="有话说"></a>有话说</h3><p><strong>我本可以…</strong></p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://oonjkyvrf.bkt.clouddn.com/cc.png" alt=""></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5 中国大陆许可协议</a>进行许可。<br>本文首发于<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>。欢迎转载，但转载请注明来自<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。  </p>
<p>本文永久链接：<a href="http://dukeluo.github.io/2017/03/31/MIT-6.00.1x-Set7/">http://dukeluo.github.io/2017/03/31/MIT-6.00.1x-Set7/</a></p>
]]></content>
    
    <summary type="html">
    
      My personal solution to the problem set 7.
    
    </summary>
    
      <category term="编程语言" scheme="http://dukeluo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="python" scheme="http://dukeluo.github.io/tags/python/"/>
    
      <category term="MIT" scheme="http://dukeluo.github.io/tags/MIT/"/>
    
      <category term="分享" scheme="http://dukeluo.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.00.1x  计算机科学和Python编程导论  Part1 of Set 6</title>
    <link href="http://dukeluo.github.io/2017/03/24/MIT-6.00.1x-Set6-part1/"/>
    <id>http://dukeluo.github.io/2017/03/24/MIT-6.00.1x-Set6-part1/</id>
    <published>2017-03-23T16:00:00.000Z</published>
    <updated>2017-04-20T16:15:31.451Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="Problem-1-Encryption"><a href="#Problem-1-Encryption" class="headerlink" title="Problem 1: Encryption"></a>Problem 1: Encryption</h3><h4 id="buildCoder"><a href="#buildCoder" class="headerlink" title="buildCoder"></a>buildCoder</h4><blockquote>
<p>感谢 glhezjnucn 童鞋对本周问题的给力翻译 !<br>You’ll now write a program to encrypt plaintext into ciphertext using the Caesar cipher. 你现在来写一个函数将使用凯撒密码将明文转为密文。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">buildCoder</span><span class="params">(shift)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Returns a dict that can apply a Caesar cipher to a letter.</span><br><span class="line">    The cipher is defined by the shift value. Ignores non-letter characters</span><br><span class="line">    like punctuation, numbers, and spaces.</span><br><span class="line"></span><br><span class="line">    shift: 0 &lt;= int &lt; 26</span><br><span class="line">    returns: dict</span><br><span class="line">    """</span></span><br><span class="line">    <span class="comment">### TODO </span></span><br><span class="line">    ciphertext = &#123;&#125;</span><br><span class="line">    uppercase_plaintext = [i <span class="keyword">for</span> i <span class="keyword">in</span> string.ascii_uppercase]</span><br><span class="line">    lowercase_plaintext = [i <span class="keyword">for</span> i <span class="keyword">in</span> string.ascii_lowercase]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">        <span class="keyword">if</span> i &lt; (<span class="number">26</span> - shift):</span><br><span class="line">            ciphertext[uppercase_plaintext[i]] = uppercase_plaintext[i+shift]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ciphertext[uppercase_plaintext[i]] = uppercase_plaintext[i+shift<span class="number">-26</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">        <span class="keyword">if</span> i &lt; (<span class="number">26</span> - shift):</span><br><span class="line">            ciphertext[lowercase_plaintext[i]] = lowercase_plaintext[i+shift]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            ciphertext[lowercase_plaintext[i]] = lowercase_plaintext[i+shift<span class="number">-26</span>]</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="applyCoder"><a href="#applyCoder" class="headerlink" title="applyCoder"></a>applyCoder</h4><blockquote>
<p>Next, define the function applyCoder, which applies a coder to a string of text. 接着定义函数applyCoder, 将一个密钥变换作用到字符串. </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">applyCoder</span><span class="params">(text, coder)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Applies the coder to the text. Returns the encoded text.</span><br><span class="line"></span><br><span class="line">    text: string</span><br><span class="line">    coder: dict with mappings of characters to shifted characters</span><br><span class="line">    returns: text after mapping coder chars to original text</span><br><span class="line">    """</span></span><br><span class="line">    <span class="comment">### TODO</span></span><br><span class="line">    cipherText = <span class="string">''</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> char <span class="keyword">in</span> string.ascii_letters:</span><br><span class="line">            cipherText += coder[char]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cipherText += char</span><br><span class="line">    <span class="keyword">return</span> cipherText</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="encode-strings"><a href="#encode-strings" class="headerlink" title="encode strings"></a>encode strings</h4><blockquote>
<p>Once you have written buildCoder and applyCoder, you should be able to use them to encode strings. 写完了buildCoder 和 applyCoder函数,你就能对字符串加密解密了. </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">applyShift</span><span class="params">(text, shift)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Given a text, returns a new text Caesar shifted by the given shift</span><br><span class="line">    offset. Lower case letters should remain lower case, upper case</span><br><span class="line">    letters should remain upper case, and all other punctuation should</span><br><span class="line">    stay as it is.</span><br><span class="line"></span><br><span class="line">    text: string to apply the shift to</span><br><span class="line">    shift: amount to shift the text (0 &lt;= int &lt; 26)</span><br><span class="line">    returns: text after being shifted by specified amount.</span><br><span class="line">    """</span></span><br><span class="line">    <span class="comment">### TODO.</span></span><br><span class="line">    <span class="comment">### HINT: This is a wrapper function.</span></span><br><span class="line">    <span class="keyword">return</span> applyCoder(text,buildCoder(shift))</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Problem-2-Decryption"><a href="#Problem-2-Decryption" class="headerlink" title="Problem 2: Decryption"></a>Problem 2: Decryption</h3><blockquote>
<p>Your friend, who is also taking 6.00.1x, is really excited about the program she wrote for Problem 1 of this problem set. She sends you emails, but they’re all encrypted with the Caesar cipher! 你的朋友, 也参加了6.00.1x课程,对她在问题1中编写的程序很是兴奋，她发了一份email给你，不过她用了恺撒密文<br>If you know which shift key she is using, then decrypting her message is an easy task. If the string message is the encrypted message and k is the shift key she is using, then calling applyShift(message, 26-k) returns her original message. Do you see why? 如果你知道她所用的密钥，那么解码她的信息是很容易的事情，如果信息message是按k-移位转换的，你只需用applyShift(message, 26-k)就返回原来的信息message. 你明白为什么吗?<br>The problem is, you don’t know which shift key she is using. The good news is, you know your friend only speaks and writes English words. So if you can write a program to find the decoding that produces the maximum number of real English words, you can probably find the right decoding (there’s always a chance that the shift may not be unique. Accounting for this would use statistical methods that we won’t require of you.)<br>问题是，如果你不知道她用了什么k-移位密钥，好在你知道你的朋友仅用英语单词. 因此如果你能写个程序，找出能解码成含有最多英语单词的密钥，那你很有可能找到正确的解码方法 (按此想法有可能得到不唯一的移位密钥，对付它可能需要统计方法，但这里我们不对此作要求.)</p>
</blockquote>
<h4 id="pseudocode-伪码"><a href="#pseudocode-伪码" class="headerlink" title="pseudocode 伪码"></a>pseudocode 伪码</h4><p>Right now, you should take time to write some pseudocode! Think about an algorithm you could use to solve this problem and write the steps down. Then, you can verify your algorithm with the supplied pseudocode in ps6_pseudo.txt before coding.<br>现在你需要花点时间来写伪码! 想想你来解这个问题的算法并将它写成步骤，然后在开始编程之前你可以对照我们提供的伪码（ps6_pseudo.txt）.<br>After you’ve done writing and checking your pseudocode, implement findBestShift(). This function takes a wordList and a sample of encrypted text and attempts to find the shift that encoded the text. A simple indication of whether or not the correct shift has been found is if most of the words obtained after a shift are valid words. Note that this only means that most of the words obtained are actual words. It is possible to have a message that can be decoded by two separate shifts into different sets of words. While there are various strategies for deciding between ambiguous decryptions, for this problem we are only looking for a simple solution.<br>当你写好了伪码并加以检查，开始设计 findBestShift().这个函数接收单词列表wordList以及密文样本,试着找出最好的移位密钥. 看是否找到了正确的密钥的一个简单的征兆是看看它是否把很多密文中的单词转换成了真实的单词。有可能会有不同的密钥将密文解码为不同的单词集，这时需要决定哪个解码是需要很多策略的，但这个问题我们只需要你应对简单的情形.<br>To assist you in solving this problem, we have provided a helper function, isWord(wordList, word). This simply determines if word is a valid word according to the wordList. This function ignores capitalization and punctuation.<br>为辅助你解决问题，我们提供了辅助函数isWord(wordList, word). 它能判定一个串是否是英语单词列表wordList中的有效词汇。函数将忽略大写开头以及标点符号。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">findBestShift</span><span class="params">(wordList, text)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Finds a shift key that can decrypt the encoded text.</span><br><span class="line"></span><br><span class="line">    text: string</span><br><span class="line">    returns: 0 &lt;= int &lt; 26</span><br><span class="line">    """</span></span><br><span class="line">    <span class="comment">### TODO</span></span><br><span class="line">    max_num_of_words_finded,best_shift = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    str_split = string.punctuation + string.digits </span><br><span class="line">    <span class="keyword">for</span> shift <span class="keyword">in</span> range(<span class="number">26</span>):</span><br><span class="line">        num_of_valid_words = <span class="number">0</span></span><br><span class="line">        plaintext = applyShift(text, shift)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> str_split:  <span class="comment">#剔除符号和数字</span></span><br><span class="line">            text0 = plaintext.split(i)</span><br><span class="line">            plaintext = <span class="string">""</span>.join([i <span class="keyword">for</span> i <span class="keyword">in</span> text0])</span><br><span class="line">        textList =plaintext.split(<span class="string">' '</span>) <span class="comment">#剔除空格</span></span><br><span class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> textList:</span><br><span class="line">            <span class="keyword">if</span> word <span class="keyword">in</span> wordList:</span><br><span class="line">                num_of_valid_words += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> num_of_valid_words &gt; max_num_of_words_finded:</span><br><span class="line">                    max_num_of_words_finded = num_of_valid_words</span><br><span class="line">                    best_shift = shift            </span><br><span class="line">    <span class="keyword">return</span> best_shift</span><br></pre></td></tr></table></figure>
<hr>
<h4 id="decryptStory"><a href="#decryptStory" class="headerlink" title="decryptStory"></a>decryptStory</h4><blockquote>
<p>Now that you have all the pieces to the puzzle, please use them to decode the file story.txt. In the skeleton file, you will see a method getStoryString() that will return the encrypted version of the story. Fill in the following function; it should create the wordList, obtain the story, and then decrypt the story. Be sure you’ve read through the whole file to see what helper functions we’ve defined for you that may assist you in these tasks! This function will be only a few lines of code (our solution does it in 4 lines).<br>现在你已经准备好一切解题所需要的细节，请用它们来解密story.txt. 在外壳程序中，你会发现getStoryString()函数来返回story的密文，填入后续的函数，你从story中载入单词列表，再将其解码。确保你通读过我们为你写好的包装函数。这个函数不需要多少行代码（我们用了4行代码完成）。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decryptStory</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Using the methods you created in this problem set,</span><br><span class="line">    decrypt the story given by the function getStoryString().</span><br><span class="line">    Once you decrypt the message, be sure to include as a comment</span><br><span class="line">    your decryption of the story.</span><br><span class="line"></span><br><span class="line">    returns: string - story in plain text</span><br><span class="line">    """</span></span><br><span class="line">    <span class="comment">### TODO</span></span><br><span class="line">    wordList = loadWords()</span><br><span class="line">    story = getStoryString()</span><br><span class="line">    bestshift = findBestShift(wordList, story)</span><br><span class="line">    <span class="keyword">return</span>   applyCoder(story, buildCoder(bestshift))</span><br></pre></td></tr></table></figure>
<hr>
<p><strong>念起即觉，觉而不随</strong></p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://oonjkyvrf.bkt.clouddn.com/cc.png" alt=""></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5 中国大陆许可协议</a>进行许可。<br>本文首发于<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>。欢迎转载，但转载请注明来自<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。  </p>
<p>本文永久链接：<a href="http://dukeluo.github.io/2017/03/24/MIT-6.00.1x-Set6-part1/">http://dukeluo.github.io/2017/03/24/MIT-6.00.1x-Set6-part1/</a></p>
]]></content>
    
    <summary type="html">
    
      My personal solution to the Part1 of problem set 6.
    
    </summary>
    
      <category term="编程语言" scheme="http://dukeluo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="python" scheme="http://dukeluo.github.io/tags/python/"/>
    
      <category term="MIT" scheme="http://dukeluo.github.io/tags/MIT/"/>
    
      <category term="分享" scheme="http://dukeluo.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.00.1x  计算机科学和Python编程导论  Set 4</title>
    <link href="http://dukeluo.github.io/2017/03/18/MIT-6.00.1x-Set4/"/>
    <id>http://dukeluo.github.io/2017/03/18/MIT-6.00.1x-Set4/</id>
    <published>2017-03-17T16:00:00.000Z</published>
    <updated>2017-04-20T15:29:31.172Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="Word-Scores-为单词算分值"><a href="#Word-Scores-为单词算分值" class="headerlink" title="Word Scores 为单词算分值"></a>Word Scores 为单词算分值</h3><blockquote>
<p>感谢 glhezjnucn 童鞋的给力翻译!!<br>The first step is to implement some code that allows us to calculate the score for a single word. The function getWordScore should accept as input a string of lowercase letters (a word) and return the integer score for that word, using the game’s scoring rules.<br>代码设计的第一步是让我们为一个单词计算它的得分。函数getWordScore 接收一个小写字母串 (一个单词)，然后按照游戏的积分规则返回它的得分值 。</p>
<p>Hints</p>
<ul>
<li><p>You may assume that the input word is always either a string of lowercase letters, or the empty string “”. 你可以假设输入总是小写字母串或者空串 “”.</p>
</li>
<li><p>You will want to use the SCRABBLE_LETTER_VALUES dictionary defined at the top of ps4a.py. You should not change its value. 你可能要用到SCRABBLE_LETTER_VALUES词典常量，文件ps4a.py开始部分中定义的. 不可以改变它的值.</p>
</li>
<li><p>Do not assume that there are always 7 letters in a hand! The parameter n is the number of letters required for a bonus score (the maximum number of letters in the hand). Our goal is to keep the code modular - if you want to try playing your word game with n=10 or n=4, you will be able to do it by simply changing the value of HAND_SIZE! 不能假定每手总是7张牌! 参数 n 用于判断是否给奖励分(手上牌的最大张数). 我们的目标是模块化设计- 你可以玩n=10 或 n=4的游戏, 只须更改 HAND_SIZE的值来达到这个目的!</p>
</li>
<li><p>Testing: If this function is implemented properly, and you run test_ps4a.py, you should see that the test_getWordScore() tests pass. Also test your implementation of getWordScore, using some reasonable English words. 测试: 如果函数被正确的编写，你运行test_ps4a.py, 你将看到test_getWordScore() 检测通过. 用你的函数getWordScore检测一些合理单词的分值.</p>
</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getWordScore</span><span class="params">(word, n)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Returns the score for a word. Assumes the word is a valid word.</span><br><span class="line"></span><br><span class="line">    The score for a word is the sum of the points for letters in the</span><br><span class="line">    word, multiplied by the length of the word, PLUS 50 points if all n</span><br><span class="line">    letters are used on the first turn.</span><br><span class="line"></span><br><span class="line">    Letters are scored as in Scrabble; A is worth 1, B is worth 3, C is</span><br><span class="line">    worth 3, D is worth 2, E is worth 1, and so on (see SCRABBLE_LETTER_VALUES)</span><br><span class="line"></span><br><span class="line">    word: string (lowercase letters)</span><br><span class="line">    n: integer (HAND_SIZE; i.e., hand size required for additional points)</span><br><span class="line">    returns: int &gt;= 0</span><br><span class="line">    """</span></span><br><span class="line">    letter_score,extra_score = <span class="number">0</span>,<span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">        letter_score +=SCRABBLE_LETTER_VALUES[letter]</span><br><span class="line">    <span class="keyword">if</span> len(word) == n:</span><br><span class="line">        extra_score = <span class="number">50</span></span><br><span class="line">    <span class="keyword">return</span> letter_score * len(word) + extra_score</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Dealing-With-Hands-一手牌的处理过程"><a href="#Dealing-With-Hands-一手牌的处理过程" class="headerlink" title="Dealing With Hands 一手牌的处理过程"></a>Dealing With Hands 一手牌的处理过程</h3><blockquote>
<p><strong>Please read this problem entirely!!</strong>请完整阅读这个问题!!  The majority of this problem consists of learning how to read code, which is an incredibly useful and important skill. At the end, you will implement a short function. Be sure to take your time on this problem - it may seem easy, but reading someone else’s code can be challenging and this is an important exercise.这个问题的一个重要目的是学习如何去阅读代码，这是相当有用且重要的技能。在结尾，你将写一个短小的函数。在这个问题上你该确保花点时间-它看起来简单，但读别人的代码又是具有挑战性的，这是一次很重要的练习。</p>
<h4 id="Representing-hands-表示一手牌"><a href="#Representing-hands-表示一手牌" class="headerlink" title="Representing hands 表示一手牌"></a>Representing hands 表示一手牌</h4><p>A hand is the set of letters held by a player during the game. The player is initially dealt a set of random letters. For example, the player could start out with the following hand: a, q, l, m, u, i, l. In our program, a hand will be represented as a dictionary: the keys are (lowercase) letters and the values are the number of times the particular letter is repeated in that hand. For example, the above hand would be represented as:<br>一手牌是指游戏过程中玩家手上的字母集合。玩家最初被随机分配到一手牌。例如玩家手中开始时的牌： a, q, l, m, u, i, l. 在我们的程序中，一手牌，表示为一个词典变量: 小写字母作为键值,对应的值是字母出现的次数，上面的这手字母牌表示为:<br><code>hand = {&#39;a&#39;:1, &#39;q&#39;:1, &#39;l&#39;:2, &#39;m&#39;:1, &#39;u&#39;:1, &#39;i&#39;:1}</code><br>Notice how the repeated letter ‘l’ is represented. Remember that with a dictionary, the usual way to access a value is hand[‘a’], where ‘a’ is the key we want to find. However, this only works if the key is in the dictionary; otherwise, we get a KeyError. To avoid this, we can use the call hand.get(‘a’,0). This is the “safe” way to access a value if we are not sure the key is in the dictionary. d.get(key,default) returns the value for key if key is in the dictionary d, else default. If default is not given, it returns None, so that this method never raises a KeyError. For example:<br>注意重复字母l的表示.记住从词典变量中得到一个值通常的方法是hand[‘a’], 其中’a’ 是我们要找的键值.不过，这个方式只有当键值在词典中的时候才可以，否则会导致KeyError错误.避免这个，可以用hand.get(‘a’,0). 这种形式比较安全些，如果我们不太确定键值是否在词典中. d.get(key,default)将返回对应值（键值存在），或者返回缺省值（这里是0），如果不给缺省值，那返回None,因此这个方法不会引发KeyError. 例如:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hand[<span class="string">'e'</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">'e'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hand.get(<span class="string">'e'</span>, <span class="number">0</span>)</span><br><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure>
<h4 id="Converting-words-into-dictionary-representation"><a href="#Converting-words-into-dictionary-representation" class="headerlink" title="Converting words into dictionary representation"></a>Converting words into dictionary representation</h4><p>One useful function we’ve defined for you is getFrequencyDict, defined near the top of ps4a.py. When given a string of letters as an input, it returns a dictionary where the keys are letters and the values are the number of times that letter is represented in the input string. For example:<br>我们已经为你设计了一个有用的函数getFrequencyDict，给它一个字母串，它返回这个字母串所表示的一个词典（即一手牌）</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>getFrequencyDict(<span class="string">"hello"</span>)</span><br><span class="line">&#123;<span class="string">'h'</span>: <span class="number">1</span>, <span class="string">'e'</span>: <span class="number">1</span>, <span class="string">'l'</span>: <span class="number">2</span>, <span class="string">'o'</span>: <span class="number">1</span>&#125;</span><br></pre></td></tr></table></figure>
<p>As you can see, this is the same kind of dictionary we use to represent hands. 这就是一手牌的表示形式。</p>
<h4 id="Displaying-a-hand-显示一手牌"><a href="#Displaying-a-hand-显示一手牌" class="headerlink" title="Displaying a hand 显示一手牌"></a>Displaying a hand 显示一手牌</h4><p>Given a hand represented as a dictionary, we want to display it in a user-friendly way. We have provided the implementation for this in the displayHand function. Take a few minutes right now to read through this function carefully and understand what it does and how it works.<br>以词典形式给定一手牌之后，我们想将牌以用户-友好的形式显示出来，我们为你提供了函数displayHand. 现在就花几分钟去仔细阅读这个函数，看看它是怎么工作的。</p>
<h4 id="Generating-a-random-hand-随机生成一手牌"><a href="#Generating-a-random-hand-随机生成一手牌" class="headerlink" title="Generating a random hand 随机生成一手牌"></a>Generating a random hand 随机生成一手牌</h4><p>The hand a player is dealt is a set of letters chosen at random. We provide you with the implementation of a function that generates this random hand, dealHand. The function takes as input a positive integer n, and returns a new object, a hand containing n lowercase letters. Again, take a few minutes (right now!) to read through this function carefully and understand what it does and how it works.<br>玩家发到的牌是随机选取的字母集合，我们给你设计了实现这个目的的函数dealHand. 这个函数以一个正整数n为输入参数，生成一个含n个小写字母的一手牌。同样，现在（对就现在！）就花几分钟去仔细阅读这个函数，看看它是怎么工作的。</p>
<h4 id="Removing-letters-from-a-hand-you-implement-this-从一手牌中移去字母"><a href="#Removing-letters-from-a-hand-you-implement-this-从一手牌中移去字母" class="headerlink" title="Removing letters from a hand (you implement this) 从一手牌中移去字母"></a>Removing letters from a hand (you implement this) 从一手牌中移去字母</h4><p>The player starts with a hand, a set of letters. As the player spells out words, letters from this set are used up. For example, the player could start out with the following hand: a, q, l, m, u, i, l. The player could choose to spell the word quail . This would leave the following letters in the player’s hand: l, m. Your task is to implement the function updateHand, which takes in two inputs - a hand and a word (string). updateHand uses letters from the hand to spell the word, and then returns a copy of the hand, containing only the letters remaining. For example:<br>玩家从一手牌：一组字母集合开始，当玩家组合出一个单词，字母集中的字母就被消耗掉。就算玩家从这手牌开始: a, q, l, m, u, i, l. 他可能组合一个单词quail . 那么玩家手上就剩余l, m.现在你的任务是实现函数updateHand（更新手上的牌）, 接收两个输入参数 – 一手牌， 一个单词 (字母串). updateHand 使用手上的牌组装单词，然后返回剩余的牌，（玩家新的一手牌）例如</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>hand = &#123;<span class="string">'a'</span>:<span class="number">1</span>, <span class="string">'q'</span>:<span class="number">1</span>, <span class="string">'l'</span>:<span class="number">2</span>, <span class="string">'m'</span>:<span class="number">1</span>, <span class="string">'u'</span>:<span class="number">1</span>, <span class="string">'i'</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>displayHand(hand) <span class="comment"># Implemented for you已经为你设计好的</span></span><br><span class="line">a q l l m u i</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hand = updateHand(hand, <span class="string">'quail'</span>) <span class="comment"># You implement this function!你实现的函数!</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>hand</span><br><span class="line">&#123;<span class="string">'a'</span>:<span class="number">0</span>, <span class="string">'q'</span>:<span class="number">0</span>, <span class="string">'l'</span>:<span class="number">1</span>, <span class="string">'m'</span>:<span class="number">1</span>, <span class="string">'u'</span>:<span class="number">0</span>, <span class="string">'i'</span>:<span class="number">0</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>displayHand(hand)</span><br><span class="line">l m</span><br></pre></td></tr></table></figure>
<p>Implement the updateHand function. Make sure this function has no side effects: i.e., it must not mutate the hand passed in. Before pasting your function definition here, be sure you’ve passed the appropriate tests in test_ps4a.py.<br>实现这个updateHand 函数. 确保这个函数不产生副作用: i.e., 不能改变传入的那手牌.在将代码复制到提交区之前，确信已通过test_ps4a.py的测试.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">updateHand</span><span class="params">(hand, word)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Assumes that 'hand' has all the letters in word.</span><br><span class="line">    In other words, this assumes that however many times</span><br><span class="line">    a letter appears in 'word', 'hand' has at least as</span><br><span class="line">    many of that letter in it. </span><br><span class="line"></span><br><span class="line">    Updates the hand: uses up the letters in the given word</span><br><span class="line">    and returns the new hand, without those letters in it.</span><br><span class="line"></span><br><span class="line">    Has no side effects: does not modify hand.</span><br><span class="line"></span><br><span class="line">    word: string</span><br><span class="line">    hand: dictionary (string -&gt; int)    </span><br><span class="line">    returns: dictionary (string -&gt; int)</span><br><span class="line">    """</span></span><br><span class="line">    <span class="comment"># TO DO ... &lt;-- Remove this comment when you code this function</span></span><br><span class="line">    hand_copy = hand.copy()</span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">        hand_copy[letter] -= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> hand_copy</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Valid-Words"><a href="#Valid-Words" class="headerlink" title="Valid Words"></a>Valid Words</h3><blockquote>
<p>At this point, we have written code to generate a random hand and display that hand to the user. We can also ask the user for a word (Python’s raw_input) and score the word (using your getWordScore). However, at this point we have not written any code to verify that a word given by a player obeys the rules of the game. A valid word is in the word list; and it is composed entirely of letters from the current hand. Implement the isValidWord function.<br>到此，我们已经写出代码来生成随机的一手字母牌，并将牌显示给玩家看。我们可以请用户（玩家）输入一个单词(用raw_input),对单词计算得分(用函数getWordScore)。然而，至此我们并没有写代码来检查用户输入的单词是否遵循游戏规则。有效的单词必须是单词列表中的词，而且它必须完全由手上的字母牌构成. 实现这样的函数isValidWord.<br>Testing: Make sure the test_isValidWord tests pass. In addition, you will want to test your implementation by calling it multiple times on the same hand - what should the correct behavior be? Additionally, the empty string (‘’) is not a valid word - if you code this function correctly, you shouldn’t need an additional check for this condition.<br>测试: 确保test_isValidWord 的测试要通过. 而且,你可能对同一手牌测试多次来检查你的函数设计-需要怎样的正确行为呢? 另外, 空的字符串不是有效单词-如果你的代码正确编写的话，你是不需要对这个进行额外检查的。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">isValidWord</span><span class="params">(word, hand, wordList)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Returns True if word is in the wordList and is entirely</span><br><span class="line">    composed of letters in the hand. Otherwise, returns False.</span><br><span class="line"></span><br><span class="line">    Does not mutate hand or wordList.</span><br><span class="line">   </span><br><span class="line">    word: string</span><br><span class="line">    hand: dictionary (string -&gt; int)</span><br><span class="line">    wordList: list of lowercase strings</span><br><span class="line">    """</span></span><br><span class="line">    <span class="comment"># TO DO ... &lt;-- Remove this comment when you code this function</span></span><br><span class="line">    hand_copy =hand.copy()</span><br><span class="line">    <span class="keyword">if</span> word <span class="keyword">in</span> wordList:</span><br><span class="line">        <span class="keyword">for</span> letter <span class="keyword">in</span> word:</span><br><span class="line">            hand_copy[letter] = hand_copy.get(letter,<span class="number">0</span>) - <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> fres <span class="keyword">in</span> hand_copy.values():</span><br><span class="line">            <span class="keyword">if</span> fres &lt; <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Hand-Length-计算手上字母牌的长度"><a href="#Hand-Length-计算手上字母牌的长度" class="headerlink" title="Hand Length 计算手上字母牌的长度"></a>Hand Length 计算手上字母牌的长度</h3><blockquote>
<p>We are now ready to begin writing the code that interacts with the player. We’ll be implementing the playHand function. This function allows the user to play out a single hand. First, though, you’ll need to implement the helper calculateHandlen function, which can be done in under five lines of code.<br>现在我们已经可以开始编写与玩家交互的代码了。我们将实现函数playHand, 该函数允许玩家打一手牌（就玩一次）。当然首先，你需要实现一个辅助函数 calculateHandlen, (译者注：计算出手中牌的长度，重复字母按重复次数计算，您可以设想为手上有多少张牌)，该函数可以用少于5行的代码来实现（译者注：如果您实在想挑战一下，那就写一行代码）。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculateHandlen</span><span class="params">(hand)</span>:</span></span><br><span class="line">    <span class="string">""" </span><br><span class="line">    Returns the length (number of letters) in the current hand.</span><br><span class="line">    </span><br><span class="line">    hand: dictionary (string int)</span><br><span class="line">    returns: integer</span><br><span class="line">    """</span></span><br><span class="line">    <span class="comment"># TO DO... &lt;-- Remove this comment when you code this function</span></span><br><span class="line">    sum_len = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> hand.values():</span><br><span class="line">        sum_len += length</span><br><span class="line">    <span class="keyword">return</span> sum_len</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Playing-a-Hand-玩一手牌（玩一次）的设计"><a href="#Playing-a-Hand-玩一手牌（玩一次）的设计" class="headerlink" title="Playing a Hand 玩一手牌（玩一次）的设计"></a>Playing a Hand 玩一手牌（玩一次）的设计</h3><blockquote>
<p>In ps4a.py, note that in the function playHand, there is a bunch of pseudocode. This pseudocode is provided to help guide you in writing your function. Check out the Why Pseudocode? resource to learn more about the What and Why of Pseudocode before you start coding your solution.<br>在文件ps4a.py中, 注意在函数playHand,有一大堆的伪代码. 这些伪代码指导你代码编写。要是不了解啥是伪代码，为什么用伪代码，去搜索学习一下吧.<br>Note: Do not assume that there will always be 7 letters in a hand! The parameter n represents the size of the hand.注意：不要假设一手牌始终是7张牌，参数n代表一手牌的长度. </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">playHand</span><span class="params">(hand, wordList, n)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Allows the user to play the given hand, as follows:</span><br><span class="line"></span><br><span class="line">    * The hand is displayed.</span><br><span class="line">    * The user may input a word or a single period (the string ".") </span><br><span class="line">      to indicate they're done playing</span><br><span class="line">    * Invalid words are rejected, and a message is displayed asking</span><br><span class="line">      the user to choose another word until they enter a valid word or "."</span><br><span class="line">    * When a valid word is entered, it uses up letters from the hand.</span><br><span class="line">    * After every valid word: the score for that word is displayed,</span><br><span class="line">      the remaining letters in the hand are displayed, and the user</span><br><span class="line">      is asked to input another word.</span><br><span class="line">    * The sum of the word scores is displayed when the hand finishes.</span><br><span class="line">    * The hand finishes when there are no more unused letters or the user</span><br><span class="line">      inputs a "."</span><br><span class="line"></span><br><span class="line">      hand: dictionary (string -&gt; int)</span><br><span class="line">      wordList: list of lowercase strings</span><br><span class="line">      n: integer (HAND_SIZE; i.e., hand size required for additional points)</span><br><span class="line">      </span><br><span class="line">    """</span></span><br><span class="line">    <span class="comment"># BEGIN PSEUDOCODE (download ps4a.py to see)</span></span><br><span class="line">    hand_copy = hand.copy()</span><br><span class="line">    total_score = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> calculateHandlen(hand_copy) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Current Hand: '</span>,</span><br><span class="line">        displayHand(hand_copy)</span><br><span class="line">        word = raw_input(<span class="string">'Enter word, or a "." to indicate that you are finished: '</span>)</span><br><span class="line">        <span class="keyword">if</span> word ==<span class="string">'.'</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'Goodbye! Total score: %s points.'</span> % total_score</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">if</span> isValidWord(word, hand_copy, wordList):</span><br><span class="line">                word_score = getWordScore(word, n)</span><br><span class="line">                total_score += word_score</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'"%s" earned %s points. Total: %s points'</span> %(word,word_score,total_score)</span><br><span class="line">                hand_copy = updateHand(hand_copy, word)</span><br><span class="line">                <span class="keyword">print</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'Invalid word, please try again.'</span></span><br><span class="line">                <span class="keyword">print</span></span><br><span class="line">    <span class="keyword">if</span> calculateHandlen(hand_copy) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Run out of letters. Total score: %s points.'</span> % total_score</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Playing-a-Game-完成最后设计"><a href="#Playing-a-Game-完成最后设计" class="headerlink" title="Playing a Game 完成最后设计"></a>Playing a Game 完成最后设计</h3><blockquote>
<p>A game consists of playing multiple hands. We need to implement one final function to complete our word-game program. Write the code that implements the playGame function. You should remove the code that is currently uncommented in the playGame body. Read through the specification and make sure you understand what this function accomplishes. For the game, you should use the HAND_SIZE constant to determine the number of cards in a hand.<br>完整的游戏是可以让玩家反复打多手牌，为此我们需要最后完成一个函数，以便完成我们的单词游戏（译注：到此Part A完工）。为函数playGame 编写代码。你需要将playGame函数体中目前没有注释的代码先移去（译注：ps4a.py会自动调用playGame,有一句print是要去掉的）。通读那里的说明，理解函数应该做什么。在游戏中，你需要用HAND_SIZE常量来决定一手牌的初始长度（译注：即不可以限定是文中作为举例提到的7）.<br>Testing: Try out this implementation as if you were playing the game. Try out different values for HAND_SIZE with your program, and be sure that you can play the wordgame with different hand sizes by modifying only the variable HAND_SIZE.<br>测试: 就像你真的在玩这个游戏一样检测你的设计，并尝试不同的HAND_SIZE，确保你的游戏只需通过改变HAND_SIZE就可以玩不同长度一手牌的单词游戏。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">playGame</span><span class="params">(wordList)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Allow the user to play an arbitrary number of hands.</span><br><span class="line"> </span><br><span class="line">    1) Asks the user to input 'n' or 'r' or 'e'.</span><br><span class="line">      * If the user inputs 'n', let the user play a new (random) hand.</span><br><span class="line">      * If the user inputs 'r', let the user play the last hand again.</span><br><span class="line">      * If the user inputs 'e', exit the game.</span><br><span class="line">      * If the user inputs anything else, tell them their input was invalid.</span><br><span class="line"> </span><br><span class="line">    2) When done playing the hand, repeat from step 1</span><br><span class="line">    """</span></span><br><span class="line">    <span class="comment"># TO DO ... &lt;-- Remove this comment when you code this function</span></span><br><span class="line">    n = HAND_SIZE</span><br><span class="line">    command ,can_replay = <span class="keyword">None</span>,<span class="keyword">None</span></span><br><span class="line">    <span class="keyword">while</span> command != <span class="string">'e'</span>:</span><br><span class="line">        command = raw_input(<span class="string">'Enter n to deal a new hand, r to replay the last hand, or e to end game: '</span>)</span><br><span class="line">        <span class="keyword">if</span> command == <span class="string">'e'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> command == <span class="string">'n'</span>:</span><br><span class="line">            last_hand = dealHand(n)</span><br><span class="line">            playHand(last_hand, wordList, n)</span><br><span class="line">            can_replay = <span class="keyword">True</span></span><br><span class="line">            <span class="keyword">print</span></span><br><span class="line">        <span class="keyword">elif</span> command ==<span class="string">'r'</span>:</span><br><span class="line">            <span class="keyword">if</span> can_replay:</span><br><span class="line">                playHand(last_hand, wordList, n)</span><br><span class="line">                <span class="keyword">print</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'You have not played a hand yet. Please play a new hand first!'</span></span><br><span class="line">                <span class="keyword">print</span> </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'Invalid command.'</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Computer-Chooses-a-Word-计算机选单词"><a href="#Computer-Chooses-a-Word-计算机选单词" class="headerlink" title="Computer Chooses a Word 计算机选单词"></a>Computer Chooses a Word 计算机选单词</h3><blockquote>
<p><strong>Part B is dependent on your functions from ps4a.py, so be sure to complete ps4a.py before working on ps4b.py</strong> Part B 建立在你在ps4a.py中设计好的函数，因此确保在开始做ps4b.py之前你已经完成ps4a.py<br>Now that you have completed your word game code, you decide that you would like to enable your computer (SkyNet) to play the game (your hidden agenda is to prove once and for all that computers are inferior to human intellect!) In Part B you will make a modification to the playHand function from part A that will enable this to happen. The idea is that you will be able to compare how you as a user succeed in the game compared to the computer’s performance.<br>到此你已经完成了单词游戏的编码，你可能会想到希望你的计算机(Skynet)来玩这个游戏(你的潜在动机可能想一次来证明计算机总是低于人类的智能！) 在Part B，你将对Part A的playHand函数做出修改，以便实现这样的想法。想法是，你可以比较你作为用户玩家如何在游戏中胜过计算机玩家的表现。<br>It is your responsibility to create the function compChooseWord(hand, wordList, n). Pseudocode is provided in the file ps4b.py.<br>你负责创建函数compChooseWord(hand, wordList, n). ps4b.py中提供了伪代码. </p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compChooseWord</span><span class="params">(hand, wordList, n)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Given a hand and a wordList, find the word that gives </span><br><span class="line">    the maximum value score, and return it.</span><br><span class="line"></span><br><span class="line">    This word should be calculated by considering all the words</span><br><span class="line">    in the wordList.</span><br><span class="line"></span><br><span class="line">    If no words in the wordList can be made from the hand, return None.</span><br><span class="line"></span><br><span class="line">    hand: dictionary (string -&gt; int)</span><br><span class="line">    wordList: list (string)</span><br><span class="line">    returns: string or None</span><br><span class="line">    """</span></span><br><span class="line">    <span class="comment"># BEGIN PSEUDOCODE (available within ps4b.py)</span></span><br><span class="line">    max_score,best_word = <span class="number">0</span>,<span class="keyword">None</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> wordList:</span><br><span class="line">        <span class="keyword">if</span> isValidWord(word, hand, wordList):</span><br><span class="line">            <span class="keyword">if</span> getWordScore(word,n) &gt; max_score:</span><br><span class="line">                max_score = getWordScore(word,n)</span><br><span class="line">                best_word = word</span><br><span class="line">    <span class="keyword">return</span> best_word</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Computer-Plays-a-Hand-计算机玩一手牌"><a href="#Computer-Plays-a-Hand-计算机玩一手牌" class="headerlink" title="Computer Plays a Hand 计算机玩一手牌"></a>Computer Plays a Hand 计算机玩一手牌</h3><blockquote>
<p>Now that we have the ability to let the computer choose a word, we need to set up a function to allow the computer to play a hand - in a manner very similar to Part A’s playHand function (get the hint?).<br>前面我们已经能让计算机来选一个单词了（译注：在本地机器测试时，遍历8万多单词选出最高个分），现在我们需要设计一个函数让计算机玩一手牌，就像Part A的playHand.<br>Implement the compPlayHand function. This function should allow the computer to play a given hand, using the procedure you just wrote in the previous part. This should be very similar to the earlier version in which a user selected the word, although deciding when it is done playing a particular hand will be different.<br>编写函数compPlayHand .这个函数能让计算机来玩给定的一手牌，这与前面的设计应该很类似，那里是用户玩家给出单词，当然，应对特殊的一手牌的时候可能有区别。<br>Be sure to test your function on some randomly generated hands using dealHand.用dealHand随机产生一手牌来测试你的函数实现。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compPlayHand</span><span class="params">(hand, wordList, n)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Allows the computer to play the given hand, following the same procedure</span><br><span class="line">    as playHand, except instead of the user choosing a word, the computer </span><br><span class="line">    chooses it.</span><br><span class="line"></span><br><span class="line">    1) The hand is displayed.</span><br><span class="line">    2) The computer chooses a word.</span><br><span class="line">    3) After every valid word: the word and the score for that word is </span><br><span class="line">    displayed, the remaining letters in the hand are displayed, and the </span><br><span class="line">    computer chooses another word.</span><br><span class="line">    4)  The sum of the word scores is displayed when the hand finishes.</span><br><span class="line">    5)  The hand finishes when the computer has exhausted its possible</span><br><span class="line">    choices (i.e. compChooseWord returns None).</span><br><span class="line"> </span><br><span class="line">    hand: dictionary (string -&gt; int)</span><br><span class="line">    wordList: list (string)</span><br><span class="line">    n: integer (HAND_SIZE; i.e., hand size required for additional points)</span><br><span class="line">    """</span></span><br><span class="line">    <span class="comment"># TO DO ..</span></span><br><span class="line">    hand_copy = hand.copy()</span><br><span class="line">    total_score = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> calculateHandlen(hand_copy) != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Current Hand: '</span>,</span><br><span class="line">        displayHand(hand_copy)</span><br><span class="line">        word = compChooseWord(hand_copy, wordList, n)</span><br><span class="line">        <span class="keyword">if</span> word == <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'Total score: %s points.'</span> % total_score</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            word_score = getWordScore(word, n)</span><br><span class="line">            total_score += word_score</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'"%s" earned %s points. Total: %s points'</span> %(word,word_score,total_score)</span><br><span class="line">            hand_copy = updateHand(hand_copy, word)</span><br><span class="line">            <span class="keyword">print</span></span><br><span class="line">    <span class="keyword">if</span> calculateHandlen(hand_copy) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">'Total score: %s points.'</span> % total_score</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compChooseWord</span><span class="params">(hand, wordList, n)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Given a hand and a wordList, find the word that gives </span><br><span class="line">    the maximum value score, and return it.</span><br><span class="line"></span><br><span class="line">    This word should be calculated by considering all the words</span><br><span class="line">    in the wordList.</span><br><span class="line"></span><br><span class="line">    If no words in the wordList can be made from the hand, return None.</span><br><span class="line"></span><br><span class="line">    hand: dictionary (string -&gt; int)</span><br><span class="line">    wordList: list (string)</span><br><span class="line">    n: integer (HAND_SIZE; i.e., hand size required for additional points)</span><br><span class="line"></span><br><span class="line">    returns: string or None</span><br><span class="line">    """</span></span><br><span class="line">    max_score,best_word = <span class="number">0</span>,<span class="keyword">None</span></span><br><span class="line">    <span class="keyword">for</span> word <span class="keyword">in</span> wordList:</span><br><span class="line">        <span class="keyword">if</span> isValidWord(word, hand, wordList):</span><br><span class="line">            <span class="keyword">if</span> getWordScore(word,n) &gt; max_score:</span><br><span class="line">                max_score = getWordScore(word,n)</span><br><span class="line">                best_word = word</span><br><span class="line">    <span class="keyword">return</span> best_word</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="You-and-Your-Computer-与计算机一起玩"><a href="#You-and-Your-Computer-与计算机一起玩" class="headerlink" title="You and Your Computer 与计算机一起玩"></a>You and Your Computer 与计算机一起玩</h3><blockquote>
<p>(呵呵：干到这一步了，哪怕是甲骨文，翻译也是多余的，讲白了，改写playGame函数，可以让计算机玩，也可以让用户来玩，比如说用户先对一手牌玩一次，再让计算机重玩同一手牌，PK一下，用户是否干得出色)<br>问题集分11个页面，1-2是介绍性的文字材料，题目从page3到page11,其中page3-page8为Part A共设计6个函数：它们分别是getWordScore, updateHand, isValidWord, calculateHandlen, playHand和playGame,与文件ps4a.py对应，page9-page11为Part B共设计3个函数,它们分别是：compChooseWord, compPlayHand, playGame，与文件ps4b.py对应。<br>Now that your computer can choose a word, you need to give the computer the option to play. Write the code that re-implements the playGame function. You will modify the function to behave as described below in the function’s comments. As before, you should use the HAND_SIZE constant to determine the number of cards in a hand. Be sure to try out different values for HAND_SIZE with your program.<br>遵循函数体的描述(翻译在下面)，修改playGame函数。你需要为计算机增加一个选项（也就是程序运行的时候，u-用户玩，c-计算机玩，看输出样例显得更重要）</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">playGame</span><span class="params">(wordList)</span>:</span></span><br><span class="line">    <span class="string">"""</span><br><span class="line">    Allow the user to play an arbitrary number of hands.</span><br><span class="line"> </span><br><span class="line">    1) Asks the user to input 'n' or 'r' or 'e'.</span><br><span class="line">        * If the user inputs 'e', immediately exit the game.</span><br><span class="line">        * If the user inputs anything that's not 'n', 'r', or 'e', keep asking them again.</span><br><span class="line"></span><br><span class="line">    2) Asks the user to input a 'u' or a 'c'.</span><br><span class="line">        * If the user inputs anything that's not 'c' or 'u', keep asking them again.</span><br><span class="line"></span><br><span class="line">    3) Switch functionality based on the above choices:</span><br><span class="line">        * If the user inputted 'n', play a new (random) hand.</span><br><span class="line">        * Else, if the user inputted 'r', play the last hand again.</span><br><span class="line">        * If the user inputted 'u', let the user play the game</span><br><span class="line">          with the selected hand, using playHand.</span><br><span class="line">        * If the user inputted 'c', let the computer play the </span><br><span class="line">          game with the selected hand, using compPlayHand.</span><br><span class="line"></span><br><span class="line">    4) After the computer or user has played the hand, repeat from step 1</span><br><span class="line"></span><br><span class="line">    wordList: list (string)</span><br><span class="line">    """</span></span><br><span class="line">    <span class="comment"># TO DO...</span></span><br><span class="line">    n = HAND_SIZE</span><br><span class="line">    command ,can_replay = <span class="keyword">None</span>,<span class="keyword">None</span></span><br><span class="line">    <span class="keyword">while</span> command != <span class="string">'e'</span>:</span><br><span class="line">        command = raw_input(<span class="string">'Enter n to deal a new hand, r to replay the last hand, or e to end game: '</span>)</span><br><span class="line">        <span class="keyword">if</span> command == <span class="string">'e'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">elif</span> command == <span class="string">'n'</span>:</span><br><span class="line">            <span class="keyword">print</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                game_mode = raw_input(<span class="string">'Enter u to have yourself play, c to have the computer play: '</span>)</span><br><span class="line">                <span class="keyword">if</span> game_mode == <span class="string">'u'</span>:</span><br><span class="line">                    <span class="keyword">print</span></span><br><span class="line">                    last_hand = dealHand(n)</span><br><span class="line">                    playHand(last_hand, wordList, n)</span><br><span class="line">                    can_replay = <span class="keyword">True</span></span><br><span class="line">                    <span class="keyword">print</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">elif</span> game_mode == <span class="string">'c'</span>:</span><br><span class="line">                    <span class="keyword">print</span></span><br><span class="line">                    last_hand = dealHand(n)</span><br><span class="line">                    compPlayHand(last_hand, wordList, n)</span><br><span class="line">                    can_replay = <span class="keyword">True</span></span><br><span class="line">                    <span class="keyword">print</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">'Invalid command.'</span></span><br><span class="line">                    <span class="keyword">print</span></span><br><span class="line">        <span class="keyword">elif</span> command ==<span class="string">'r'</span>:</span><br><span class="line">            <span class="keyword">print</span></span><br><span class="line">            <span class="keyword">if</span> can_replay:</span><br><span class="line">                <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                    game_mode = raw_input(<span class="string">'Enter u to have yourself play, c to have the computer play: '</span>)</span><br><span class="line">                    <span class="keyword">if</span> game_mode ==<span class="string">'u'</span>:</span><br><span class="line">                        <span class="keyword">print</span></span><br><span class="line">                        playHand(last_hand, wordList, n)</span><br><span class="line">                        <span class="keyword">print</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">elif</span> game_mode == <span class="string">'c'</span>:</span><br><span class="line">                        <span class="keyword">print</span></span><br><span class="line">                        compPlayHand(last_hand, wordList, n)</span><br><span class="line">                        <span class="keyword">print</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        <span class="keyword">print</span> <span class="string">'Invalid command.'</span></span><br><span class="line">                        <span class="keyword">print</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'You have not played a hand yet. Please play a new hand first!'</span></span><br><span class="line">                <span class="keyword">print</span> </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">'Invalid command.'</span></span><br><span class="line">            <span class="keyword">print</span></span><br></pre></td></tr></table></figure>
<hr>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="0" height="0" src="https://music.daoapp.io/iframe?song=453732562&qssl=1&qlrc=1&qnarrow=0&autoplay=1"></iframe><br><strong>版权声明</strong></p>
<p><img src="http://oonjkyvrf.bkt.clouddn.com/cc.png" alt=""></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5 中国大陆许可协议</a>进行许可。<br>本文首发于<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>。欢迎转载，但转载请注明来自<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。  </p>
<p>本文永久链接：<a href="http://dukeluo.github.io/2017/03/18/MIT-6.00.1x-Set4/">http://dukeluo.github.io/2017/03/18/MIT-6.00.1x-Set4/</a></p>
]]></content>
    
    <summary type="html">
    
      My personal solution to the problem set 4.
    
    </summary>
    
      <category term="编程语言" scheme="http://dukeluo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="python" scheme="http://dukeluo.github.io/tags/python/"/>
    
      <category term="MIT" scheme="http://dukeluo.github.io/tags/MIT/"/>
    
      <category term="分享" scheme="http://dukeluo.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.00.1x  计算机科学和Python编程导论  Set 3</title>
    <link href="http://dukeluo.github.io/2017/03/13/MIT-6.00.1x-Set3/"/>
    <id>http://dukeluo.github.io/2017/03/13/MIT-6.00.1x-Set3/</id>
    <published>2017-03-12T16:00:00.000Z</published>
    <updated>2017-04-20T17:05:02.205Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="Radiation-Exposure"><a href="#Radiation-Exposure" class="headerlink" title="Radiation Exposure"></a>Radiation Exposure</h3><blockquote>
<p>感谢 glhezjnucn 同学贡献的翻译!<br>“Radioactive decay” is the process by which an unstable atom loses energy and emits ionizing particles - what is commonly refered to as radiation. Exposure to radiation can be dangerous and is very important to measure to ensure that one is not exposed to too terribly much of it.辐射衰变是不稳定原子失去能量并释放电离子的过程-这通常被称为辐射。接触辐射（暴露于辐射）可能是危险的，同时检测并确保人们不暴露于过量辐射（的环境）中变得重要。<br>The radioactivity of a material decreases over time, as the material decays. A radioactive decay curve describes this decay. The x-axis measures time, and the y-axis measures the amount of activity produced by the radioactive sample. ‘Activity’ is defined as the rate at which the nuclei within the sample undergo transititions - put simply, this measures how much radiation is emitted at any one point in time. The measurement of activity is called the Becquerel (Bq). Here is a sample radioactive decay curve:物质的辐射活性随着时间的流逝而减少，因为辐射物质在衰减。辐射衰减曲线用于描述这样的衰减过程。x轴表示时间，y轴表示辐射物质样品产生的辐射活性量。辐射的活性量定义为处于物质迁变的核的比率，它给出某一时刻所释放的辐射量。活性的度量称为Bq(理解为度量的单位即量纲)。如下是一个辐射衰减曲线的样例：<br><img src="http://www.xuetangx.com/asset-v1:MITx+6_00_1x+sp+type@asset+block/files_ps03_files_DecayCurve.png" alt=""><br>Now here’s the problem we’d like to solve. Let’s say Sarina has moved into a new apartment. Unbeknownst to her, there is a sample of Cobalt-60 inside one of the walls of the apartment. Initially that sample had 10 MBq of activity, but she moves in after the sample has been there for 5 years. She lives in the apartment for 6 years, then leaves. How much radiation was she exposed to?<br>现在我们需要解决的问题是，假若Sarina搬进了新的房子，并不为她所知的是，房子的墙里有一个放射性钴-60样品。初始时，该样品具有10MBq(百万Bq)的辐射活性，但她是那个放射性物质在那里5年后才住进去的，她在那里住了6年，然后离开了。现在请问她接触了多少辐射？<br>We can actually figure this out using the radioactive decay curve from above. What we want to know is her total radiation exposure from year 5 to year 11.<br>我们当然可以从上图的辐射曲线中计算出来。我们所需要知道的是从第5年到第11年她所接触的辐射总量。<br><img src="http://www.xuetangx.com/asset-v1:MITx+6_00_1x+sp+type@asset+block/files_ps03_files_DecayCurveMarked.png" alt=""><br>Total radiation exposure corresponds to the area between the two green lines at time = 5 and time = 11, and under the blue radioactive decay curve. This should make intuitive sense - if the x axis measures time, and the y axis measures activity, then the area under the curve measures (time <em> activity) = MBq</em>years, or, approximately the total number of MBq Sarina was exposed to in her time in the radioactive apartment (technically, this result is the combination of gamma rays and beta particles she was exposed to, but this gets a bit complicated, so we’ll ignore it. Sorry, physicists!).<br>辐射总量对应的是时间从5到11所对应的两条绿色线所对应区域的面积。这可以利用直觉-如果x轴是时间，y轴是活性度量，那么曲线下的面积(时间辐射活性)=MBq年，或者，近似的，就是Sarina在那段时间所接触的辐射量(技术地说，是由于伽玛射线与贝塔粒子，不过这太复杂了，因此我们忽略，抱歉,物理学家们！)<br><img src="http://www.xuetangx.com/asset-v1:MITx+6_00_1x+sp+type@asset+block/files_ps03_files_DecayCurveFill.png" alt=""><br>So far, so good. But, how do we calculate this? Unlike a simple shape - say a square, or a circle - we have no easy way to tell what the area under this curve is.<br>到此一切都不错。但是我们怎么来计算呢？不像简单的形状-如正方形，圆-我们没有简单的方法获得曲线下区域的面积。<br>However, we have learned a technique that can help us here - approximation. Let’s use an approximation algorithm to estimate the area under this curve! We’ll do so by first splitting up the area into equally-sized rectangles (in this case, six of them, one rectangle per year):<br>不过，我们学过一种技术可以帮助我们-近似。我们用近似的方法来估计曲线下区域的面积！我们将这么来做，先将区域切成等尺寸（意指其中一边等长）的长方形，如下情形，是6个，每年一个长方形。<br><img src="http://www.xuetangx.com/asset-v1:MITx+6_00_1x+sp+type@asset+block/files_ps03_files_DecayCurveRectangles.png" alt=""><br>Once we’ve done that, we can figure out the area of each rectangle pretty easily. Recall that the area of a rectangle is found by multiplying the height of the rectangle by its width. The height of this rectangle:<br>当我们如此做了之后，我们可以非常简便的计算出每个长方形的面积。回忆一下长方形的面积是宽度乘以高度。而这里（红色的）长方形的高度：<br><img src="http://www.xuetangx.com/asset-v1:MITx+6_00_1x+sp+type@asset+block/files_ps03_files_Rectangle1.png" alt=""><br>is the value of the curve at 5.0. If the curve is described by a function, f, we can obtain the value of the curve by asking for f(5.0).<br>是曲线在5.0处的值（函数值）.如果曲线由函数, f, 给出，我们可以用f(5.0)得到函数值.<br><code>f(5.0) = 5.181</code><br>The width of the rectangle is 1.0. So the area of this single rectangle is 1.0<em>5.181 = 5.181. To approximate how much radiation Sarina was exposed to, we next calculate the area of each successive rectangle and then sum up the areas of each rectangle to get the total. When we do this, we find that Sarina was exposed to nearly 23 MBq of radiation (technically, her apartment was bombarded by 23e6 </em> 3.154e6 = 7.25e13 neutrons, for those interested…).<br>长方形的宽为1，因此面积（指红色的那个）为1.0<em>5.181 = 5.181. 为近似的计算Sarina接触的辐射总量，我们将逐次的面积加起来即可。当我们这么假设我们发现Sarina接触的辐射总量差不多是23 MBq (技术的说, 她的房子被大约23e6 </em> 3.154e6 = 7.25e13 个中子所轰炸, 如果有人感兴趣的话。).<br>Whether or not this will kill Sarina depends exactly on the type of radiation she was exposed to (see this link which discusses more about the ways of measuring radiation). Either way, she should probably ask her landlord for a substantial refund.<br>这是否足以使Sarina致命，这取决于她所接触辐射的类型（查看链接可以获知更多关于辐射量计算的信息）。或许她可以向房东索取大量的赔偿。<br>In this problem, you are asked to find the amount of radiation a person is exposed to during some period of time by completing the following function:<br>这个问题中，要求你计算某人在某个时间段所接触的辐射量，完成如下函数的设计：</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">radiationExposure</span><span class="params">(start, stop, step)</span>:</span></span><br><span class="line">    <span class="string">'''</span><br><span class="line">    Computes and returns the amount of radiation exposed</span><br><span class="line">    to between the start and stop times. Calls the </span><br><span class="line">    function f (defined for you in the grading script)</span><br><span class="line">    to obtain the value of the function at any point.</span><br><span class="line"> </span><br><span class="line">    start: integer, the time at which exposure begins</span><br><span class="line">    stop: integer, the time at which exposure ends</span><br><span class="line">    step: float, the width of each rectangle. You can assume that</span><br><span class="line">      the step size will always partition the space evenly.</span><br><span class="line"></span><br><span class="line">    returns: float, the amount of radiation exposed to </span><br><span class="line">      between start and stop times.</span><br><span class="line">    '''</span></span><br><span class="line">    <span class="comment"># FILL IN YOUR CODE HERE...</span></span><br><span class="line">    totalRadiation=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> start&lt;stop:</span><br><span class="line">        totalRadiation+=step*f(start)</span><br><span class="line">        start+=step</span><br><span class="line">    <span class="keyword">return</span> totalRadiation</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Hangman-Part-1-Is-The-Word-Guessed"><a href="#Hangman-Part-1-Is-The-Word-Guessed" class="headerlink" title="Hangman Part 1: Is The Word Guessed?"></a>Hangman Part 1: Is The Word Guessed?</h3><blockquote>
<p>Please read the Hangman Introduction before starting this problem. The helper functions you will be creating in the next three exercises are simply suggestions, but you DO have to implement them if you want to get points for this Hangman Problem Set. If you’d prefer to structure your Hangman program in a different way, feel free to redo this Problem Set in a different way. However, if you’re new to programming, or at a loss of how to construct this program, we strongly suggest that you implement the next three helper functions before continuing on to Hangman Part 2.<br>开始这个问题之前请阅读前面关于猜单词游戏Hangman的介绍说明。在接下来的三个练习中，你将创建辅助函数，建议的方法是简单的，但你想获得这个Hangman问题集的计分的话，你必须完成它们。如果你想以另外的方式构建Hangman游戏程序，你可以在别的地方重做设计。如果你是新手，或者对构建这个程序没有头绪的话，强烈建议你在进入游戏设计第二部分之前，实现下面的3个辅助函数。<br>We’ll start by writing 3 simple functions that will help us easily code the Hangman problem. First, implement the function isWordGuessed that takes in two parameters - a string, secretWord, and a list of letters, lettersGuessed. This function returns a boolean - True if secretWord has been guessed (ie, all the letters of secretWord are in lettersGuessed) and False otherwise.<br>我们从编写3个简单的辅助函数开始，这对完整解决游戏设计有帮助。首先实现函数isWordGuessed， 它有2个参数输入- 一个字符串, secretWord, 一个字符列表, lettersGuessed. 函数返回逻辑值 - True 如果 secretWord 已经被猜中 (ie, secretWord 中的所有字母都在lettersGuessed) 或 False 否则.<br>Example Usage:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>secretWord = <span class="string">'apple'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lettersGuessed = [<span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'k'</span>, <span class="string">'p'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> isWordGuessed(secretWord, lettersGuessed)</span><br><span class="line"><span class="keyword">False</span></span><br></pre></td></tr></table></figure>
<p>For this function, you may assume that all the letters in secretWord and lettersGuessed are lowercase.<br>函数里,你可以假设secretWord 与 lettersGuessed 都是小写字母.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">def isWordGuessed(secretWord, lettersGuessed):</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    secretWord: string, the word the user is guessing</span><br><span class="line">    lettersGuessed: list, what letters have been guessed so far</span><br><span class="line">    returns: boolean, True if all the letters of secretWord are in lettersGuessed;</span><br><span class="line">      False otherwise</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    # FILL IN YOUR CODE HERE...</span><br><span class="line">    result=None</span><br><span class="line">    for letter in secretWord:</span><br><span class="line">        if letter in lettersGuessed:</span><br><span class="line">            result=True</span><br><span class="line">        else:</span><br><span class="line">            result=False</span><br><span class="line">            break</span><br><span class="line">    return result</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Printing-Out-The-User’s-Guess"><a href="#Printing-Out-The-User’s-Guess" class="headerlink" title="Printing Out The User’s Guess"></a>Printing Out The User’s Guess</h3><blockquote>
<p>Next, implement the function getGuessedWord that takes in two parameters - a string, secretWord, and a list of letters, lettersGuessed. This function returns a string that is comprised of letters and underscores, based on what letters in lettersGuessed are in secretWord. This shouldn’t be too different from isWordGuessed!<br>接着, 设计函数getGuessedWord，它有2个输入参数- 一个字符串, secretWord, 一个字母列表, lettersGuessed. 函数返回一个字符串，该返回串由字母与下划线组成，内容取决于lettersGuessed 中的字母是否是 secretWord的字母. 这个函数不应该与前面编写的代码isWordGuessed相差太大!<br>Example Usage:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>secretWord = <span class="string">'apple'</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lettersGuessed = [<span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'k'</span>, <span class="string">'p'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> getGuessedWord(secretWord, lettersGuessed)</span><br><span class="line"><span class="string">'_ pp_ e'</span></span><br></pre></td></tr></table></figure>
<p>When inserting underscores into your string, it’s a good idea to add at least a space after each one, so it’s clear to the user how many unguessed letters are left in the string (compare the readability of <strong>_<em> with </em> <em> </em> _ ). This is called usability - it’s very important, when programming, to consider the usability of your program. If users find your program difficult to understand or operate, they won’t use it!<br>当在字符串中加入下划线时，一个好主意是后面加至少一个空格，这样用户看还有多少个字母未猜中会更清楚。 (比较一下形式 </strong> 与 <em> </em> <em> </em> ). 这是可用性（ usability ）- 这对编程是很重要的, 编程是要考虑可用性. 要是用户发现你的程序难以理解或操作，他们可能不会用它!<br>For this problem, you are free to use spacing in any way you wish - our grader will only check that the letters and underscores are in the proper order; it will not look at spacing. We do encourage you to think about usability when designing.<br>对这里的问题，你可以随意地使用空格-我们的检测程序只顺序地检测字母与下划线。我们鼓励你编程时考虑可用性。<br>For this function, you may assume that all the letters in secretWord and lettersGuessed are lowercase.<br>在函数中你可以假设 secretWord 和lettersGuessed 都是小写字母.</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def getGuessedWord(secretWord, lettersGuessed):</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    secretWord: string, the word the user is guessing</span><br><span class="line">    lettersGuessed: list, what letters have been guessed so far</span><br><span class="line">    returns: string, comprised of letters and underscores that represents</span><br><span class="line">      what letters in secretWord have been guessed so far.</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    # FILL IN YOUR CODE HERE...</span><br><span class="line">    wordStr=&apos;&apos;</span><br><span class="line">    for letter in secretWord:</span><br><span class="line">        if letter in lettersGuessed:</span><br><span class="line">            wordStr+=letter</span><br><span class="line">        else:</span><br><span class="line">            wordStr+=&apos;_ &apos;</span><br><span class="line">    return wordStr</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Printing-Out-All-Available-Letters"><a href="#Printing-Out-All-Available-Letters" class="headerlink" title="Printing Out All Available Letters"></a>Printing Out All Available Letters</h3><blockquote>
<p>Next, implement the function getAvailableLetters that takes in one parameter - a list of letters, lettersGuessed. This function returns a string that is comprised of lowercase English letters - all lowercase English letters that are not in lettersGuessed.<br>接着，实现函数getAvailableLetters，它接受一个输入参数- 一个字母列表lettersGuessed. 函数返回所有没有被猜测过（即不在lettersGuessed中）的小写字母按字母顺序组成的字符串。<br>Example Usage:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lettersGuessed = [<span class="string">'e'</span>, <span class="string">'i'</span>, <span class="string">'k'</span>, <span class="string">'p'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> getAvailableLetters(lettersGuessed)</span><br><span class="line">abcdfghjlmnoqtuvwxyz</span><br></pre></td></tr></table></figure>
<p>Note that this function should return the letters in alphabetical order, as in the example above.注意返回的字符串要按字母顺序，如上所示。<br>For this function, you may assume that all the letters in lettersGuessed are lowercase.这里你可以假设lettersGuessed中的字母都是小写的。<br>Hint: You might consider using string.ascii_lowercase, which is a string comprised of all lowercase letters:提示: 你可以考虑使用 string.ascii_lowercase,来获得所有小写字母:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> string</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">print</span> string.ascii_lowercase</span><br><span class="line">abcdefghijklmnopqrstuvwxyz</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getAvailableLetters</span><span class="params">(lettersGuessed)</span>:</span></span><br><span class="line">    <span class="string">'''</span><br><span class="line">    lettersGuessed: list, what letters have been guessed so far</span><br><span class="line">    returns: string, comprised of letters that represents what letters have not</span><br><span class="line">      yet been guessed.</span><br><span class="line">    '''</span></span><br><span class="line">    <span class="comment"># FILL IN YOUR CODE HERE...</span></span><br><span class="line">    <span class="keyword">import</span> string</span><br><span class="line">    availableLetters=string.ascii_lowercase</span><br><span class="line">    <span class="keyword">for</span> letter <span class="keyword">in</span> lettersGuessed:</span><br><span class="line">        <span class="keyword">if</span> letter <span class="keyword">in</span> availableLetters:</span><br><span class="line">            availableLetters=availableLetters.replace(letter,<span class="string">''</span>)</span><br><span class="line">    <span class="keyword">return</span> availableLetters</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Hangman-Part-2-The-Game"><a href="#Hangman-Part-2-The-Game" class="headerlink" title="Hangman Part 2: The Game"></a>Hangman Part 2: The Game</h3><blockquote>
<p>感谢 glhezjnucn 童鞋的给力翻译!!<br>Now you will implement the function hangman, which takes one parameter - the secretWord the user is to guess. This starts up an interactive game of Hangman between the user and the computer. Be sure you take advantage of the three helper functions, isWordGuessed, getGuessedWord, and getAvailableLetters, that you’ve defined in the previous part.<br>现在你将开始实现（完整的游戏）程序hangman, 它有一个输入参数 –用户需要去猜测的单词 secretWord（后续程序用到的变量名）. 由它开始游戏程序Hangman用户与计算机的交互过程。确保你用到之前部分设计完成的辅助函数isWordGuessed, getGuessedWord, 和 getAvailableLetters.<br>Hints 提示:</p>
<ul>
<li><p>You should start by noticing where we’re using the provided functions (at the top of ps3_hangman.py) to load the words and pick a random one. Note that the functions loadWords and chooseWord should only be used on your local machine, not in the tutor. When you enter in your solution in the tutor, you only need to give your hangman function.<br>你需要注意到我们何时用到提供的函数 (程序 ps3_hangman.py的开始处) 来装入词库以及随机取词. 注意函数loadWords 和 chooseWord 只能用于你本地机器调试时，在提交代码中不用到. 当你提交解答代码时，你只须给出函数hangman.</p>
</li>
<li><p>Consider using lower() to convert user input to lower case. For example:考虑用函数 lower() 来将用户的输入转换为小写。<br><code>guess = &#39;A&#39;</code><br><code>guessInLowerCase = guess.lower()</code></p>
</li>
<li><p>Consider writing additional helper functions if you need them!如果你需要，你可以考虑编写额外的辅助函数</p>
</li>
<li><p>There are four important pieces of information you may wish to store:4个重要的信息你可能需要考虑保存</p>
<ol>
<li><code>secretWord</code>: The word to guess.猜测的目标单词.</li>
<li><code>lettersGuessed</code>: The letters that have been guessed so far.追踪用户猜测过的字母</li>
<li><code>mistakesMade</code>: The number of incorrect guesses made so far.记录用户猜测错误的次数</li>
<li><code>availableLetters</code>: The letters that may still be guessed. Every time a player guesses a letter, the guessed letter must be removed from availableLetters (and if they guess a letter that is not in availableLetters, you should print a message telling them they’ve already guessed that - so try again!).还可以用来被猜测的字母，用户猜测过的字母需要从availableLetters移除，用户重复猜了的字母，你需要告知用户你已经猜过这个字母。</li>
</ol>
</li>
</ul>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">def hangman(secretWord):</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    secretWord: string, the secret word to guess.</span><br><span class="line"></span><br><span class="line">    Starts up an interactive game of Hangman.</span><br><span class="line"></span><br><span class="line">    * At the start of the game, let the user know how many </span><br><span class="line">      letters the secretWord contains.</span><br><span class="line"></span><br><span class="line">    * Ask the user to supply one guess (i.e. letter) per round.</span><br><span class="line"></span><br><span class="line">    * The user should receive feedback immediately after each guess </span><br><span class="line">      about whether their guess appears in the computers word.</span><br><span class="line"></span><br><span class="line">    * After each round, you should also display to the user the </span><br><span class="line">      partially guessed word so far, as well as letters that the </span><br><span class="line">      user has not yet guessed.</span><br><span class="line"></span><br><span class="line">    Follows the other limitations detailed in the problem write-up.</span><br><span class="line">    &apos;&apos;&apos;</span><br><span class="line">    # FILL IN YOUR CODE HERE...</span><br><span class="line">    print &apos;Welcome to the game Hangman!&apos;</span><br><span class="line">    print &apos;I am thinking of a word that is &apos;+str(len(secretWord))+&apos; letters long&apos;</span><br><span class="line">    print &apos;-------------&apos;</span><br><span class="line">    guessTime = 8</span><br><span class="line">    wordGuessed = &apos;&apos;</span><br><span class="line">    lettersGuessed = ()</span><br><span class="line">    while (guessTime &gt; 0):</span><br><span class="line">        print &apos;You have &apos;+str(guessTime)+&apos; guesses left&apos;</span><br><span class="line">        print &apos;Available letters: &apos;+getAvailableLetters(lettersGuessed)</span><br><span class="line">        inputLetter = raw_input(&apos;Please guess a letter: &apos;)</span><br><span class="line">        aLetter = inputLetter.lower()</span><br><span class="line">        if aLetter in lettersGuessed:</span><br><span class="line">            print &apos;Oops! You\&apos;ve already guessed that letter: &apos;+getGuessedWord(secretWord, lettersGuessed)</span><br><span class="line">            print &apos;------------&apos;</span><br><span class="line">        else:</span><br><span class="line">            lettersGuessed += (aLetter,)</span><br><span class="line">            if aLetter in secretWord:</span><br><span class="line">                print &apos;Good guess: &apos;+getGuessedWord(secretWord, lettersGuessed)</span><br><span class="line">                print &apos;------------&apos;</span><br><span class="line">                if getGuessedWord(secretWord,lettersGuessed).count(&apos;_ &apos;) ==0:</span><br><span class="line">                    print &apos;Congratulations,you won!&apos;</span><br><span class="line">                    break</span><br><span class="line">            else:</span><br><span class="line">                guessTime -= 1</span><br><span class="line">                print &apos;Oops! That letter is not in my word: &apos;+getGuessedWord(secretWord, lettersGuessed)</span><br><span class="line">                print &apos;------------&apos;</span><br><span class="line">    if guessTime == 0:</span><br><span class="line">        print &apos;Sorry,you ran out of guesses.The word was &apos;+str(secretWord)+&apos;.&apos;</span><br></pre></td></tr></table></figure>
<hr>
<p><strong><em>If you’re with us,then be with us.</em></strong> —Storm</p>
<hr>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="0" height="0" src="https://music.daoapp.io/iframe?song=26420177&qssl=1&qlrc=1&qnarrow=0&autoplay=1"></iframe><br><strong>版权声明</strong></p>
<p><img src="http://oonjkyvrf.bkt.clouddn.com/cc.png" alt=""></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5 中国大陆许可协议</a>进行许可。<br>本文首发于<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>。欢迎转载，但转载请注明来自<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。  </p>
<p>本文永久链接：<a href="http://dukeluo.github.io/2017/03/13/MIT-6.00.1x-Set3/">http://dukeluo.github.io/2017/03/13/MIT-6.00.1x-Set3/</a></p>
]]></content>
    
    <summary type="html">
    
      My personal solution to the problem set 3.
    
    </summary>
    
      <category term="编程语言" scheme="http://dukeluo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="python" scheme="http://dukeluo.github.io/tags/python/"/>
    
      <category term="MIT" scheme="http://dukeluo.github.io/tags/MIT/"/>
    
      <category term="分享" scheme="http://dukeluo.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>小游戏《Let&#39;s Go! PiPiXia!》</title>
    <link href="http://dukeluo.github.io/2017/03/06/let&#39;s-go-PiPiXia/"/>
    <id>http://dukeluo.github.io/2017/03/06/let&#39;s-go-PiPiXia/</id>
    <published>2017-03-05T16:00:00.000Z</published>
    <updated>2017-04-20T16:18:46.873Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><p>在知乎上发现此游戏的分享，非常感谢作者的分享。这是我阅读的第一个小项目代码。给我最深的体会便是divide and conquer，逐步实现模块的功能，最后实现游戏的功能。简单分析，好像游戏实现的思路并不难。<br><a id="more"></a></p>
<h3 id="module-1-PPX的实现"><a href="#module-1-PPX的实现" class="headerlink" title="module 1. PPX的实现"></a>module 1. PPX的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> cocos</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PPX</span><span class="params">(cocos.sprite.Sprite)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(PPX, self).__init__(<span class="string">'ppx.png'</span>)</span><br><span class="line">        self.can_jump = <span class="keyword">False</span></span><br><span class="line">        self.speed = <span class="number">0</span></span><br><span class="line">        self.image_anchor = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        self.position = <span class="number">100</span>, <span class="number">300</span></span><br><span class="line">        self.schedule(self.update)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">jump</span><span class="params">(self, h)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.can_jump:</span><br><span class="line">            self.y += <span class="number">1</span></span><br><span class="line">            self.speed -= max(min(h, <span class="number">10</span>), <span class="number">7</span>)</span><br><span class="line">            self.can_jump = <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">land</span><span class="params">(self, y)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.y &gt; y - <span class="number">30</span>:</span><br><span class="line">            self.can_jump = <span class="keyword">True</span></span><br><span class="line">            self.speed = <span class="number">0</span></span><br><span class="line">            self.y = y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, dt)</span>:</span> <span class="comment">#重力属性</span></span><br><span class="line">        self.speed += <span class="number">10</span> * dt</span><br><span class="line">        self.y -= self.speed</span><br><span class="line">        <span class="keyword">if</span> self.y &lt; <span class="number">-80</span>:</span><br><span class="line">            self.reset()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.parent.reset()</span><br><span class="line">        self.can_jump = <span class="keyword">False</span></span><br><span class="line">        self.speed = <span class="number">0</span></span><br><span class="line">        self.position = <span class="number">100</span>, <span class="number">300</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="module-2-Block的实现"><a href="#module-2-Block的实现" class="headerlink" title="module 2. Block的实现"></a>module 2. Block的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> cocos</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Block</span><span class="params">(cocos.sprite.Sprite)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, pos)</span>:</span></span><br><span class="line">        super(Block, self).__init__(<span class="string">'black.png'</span>)</span><br><span class="line">        self.image_anchor = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        x, y = pos</span><br><span class="line">        <span class="keyword">if</span> x == <span class="number">0</span>:</span><br><span class="line">            self.scale_x = <span class="number">5</span></span><br><span class="line">            self.scale_y = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">			<span class="comment"># 随机产生黑块的大小</span></span><br><span class="line">			<span class="comment"># random.random() 产生0 ~ 1 的小数</span></span><br><span class="line">            self.scale_x = <span class="number">0.5</span> + random.random() * <span class="number">1.5</span></span><br><span class="line">            self.scale_y = min(max(y - <span class="number">50</span> + random.random() * <span class="number">100</span>, <span class="number">50</span>), <span class="number">300</span>) / <span class="number">100.0</span></span><br><span class="line">            self.position = x + <span class="number">50</span> + random.random() * <span class="number">100</span>, <span class="number">0</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="module-3-主体的实现"><a href="#module-3-主体的实现" class="headerlink" title="module 3. 主体的实现"></a>module 3. 主体的实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> cocos</span><br><span class="line"><span class="keyword">from</span> cocos.sprite <span class="keyword">import</span> Sprite</span><br><span class="line"><span class="keyword">from</span> pyaudio <span class="keyword">import</span> PyAudio, paInt16</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> ppx <span class="keyword">import</span> PPX</span><br><span class="line"><span class="keyword">from</span> block <span class="keyword">import</span> Block</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VoiceGame</span><span class="params">(cocos.layer.ColorLayer)</span>:</span></span><br><span class="line">    is_event_handler = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(VoiceGame, self).__init__(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">800</span>, <span class="number">600</span>)</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="comment"># init voice</span></span><br><span class="line">        self.NUM_SAMPLES = <span class="number">1000</span>  <span class="comment"># pyAudio内部缓存的块的大小</span></span><br><span class="line">        self.LEVEL = <span class="number">1500</span>  <span class="comment"># 声音保存的阈值</span></span><br><span class="line">		<span class="comment">#声音强度条</span></span><br><span class="line">        self.voicebar = Sprite(<span class="string">'black.png'</span>, color=(<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">        self.voicebar.position = <span class="number">20</span>, <span class="number">450</span></span><br><span class="line">        self.voicebar.scale_y = <span class="number">0.1</span></span><br><span class="line">        self.voicebar.image_anchor = <span class="number">0</span>, <span class="number">0</span></span><br><span class="line">        self.add(self.voicebar)</span><br><span class="line"></span><br><span class="line">        self.ppx = PPX()</span><br><span class="line">        self.add(self.ppx)</span><br><span class="line"></span><br><span class="line">        self.floor = cocos.cocosnode.CocosNode()</span><br><span class="line">        self.add(self.floor)</span><br><span class="line">        pos = <span class="number">0</span>, <span class="number">100</span></span><br><span class="line">		<span class="comment">#循环产生100个黑块</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">            b = Block(pos)</span><br><span class="line">            self.floor.add(b)</span><br><span class="line">            pos = b.x + b.width, b.height</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开启声音输入</span></span><br><span class="line">        pa = PyAudio()</span><br><span class="line">        SAMPLING_RATE = int(pa.get_device_info_by_index(<span class="number">0</span>)[<span class="string">'defaultSampleRate'</span>])</span><br><span class="line">        self.stream = pa.open(format=paInt16, channels=<span class="number">1</span>, rate=SAMPLING_RATE, input=<span class="keyword">True</span>, frames_per_buffer=self.NUM_SAMPLES)</span><br><span class="line"></span><br><span class="line">        self.schedule(self.update)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_mouse_press</span><span class="params">(self, x, y, buttons, modifiers)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">collide</span><span class="params">(self)</span>:</span></span><br><span class="line">        px = self.ppx.x - self.floor.x</span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> self.floor.get_children():</span><br><span class="line">            <span class="keyword">if</span> b.x &lt;= px + self.ppx.width * <span class="number">0.8</span> <span class="keyword">and</span> px + self.ppx.width * <span class="number">0.2</span> &lt;= b.x + b.width:  <span class="comment">#落在黑块</span></span><br><span class="line">                <span class="keyword">if</span> self.ppx.y &lt; b.height:</span><br><span class="line">                    self.ppx.land(b.height)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, dt)</span>:</span></span><br><span class="line">        <span class="comment"># 读入NUM_SAMPLES个取样</span></span><br><span class="line">        string_audio_data = self.stream.read(self.NUM_SAMPLES)</span><br><span class="line">        k = max(struct.unpack(<span class="string">'1000h'</span>, string_audio_data))</span><br><span class="line">        <span class="comment"># print k</span></span><br><span class="line">        self.voicebar.scale_x = k / <span class="number">10000.0</span></span><br><span class="line">        <span class="keyword">if</span> k &gt; <span class="number">3000</span>:</span><br><span class="line">            self.floor.x -= min((k / <span class="number">20.0</span>), <span class="number">150</span>) * dt</span><br><span class="line">        <span class="keyword">if</span> k &gt; <span class="number">8000</span>:</span><br><span class="line">            self.ppx.jump((k - <span class="number">8000</span>) / <span class="number">1000.0</span>)</span><br><span class="line">        self.collide()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.floor.x = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cocos.director.director.init(caption=<span class="string">"Let's Go! PiPiXia!"</span>)</span><br><span class="line">cocos.director.director.run(cocos.scene.Scene(VoiceGame()))</span><br></pre></td></tr></table></figure>
<p>附上源码地址：<a href="http://git.oschina.net/crossin/learn-python/tree/master/voicegame" target="_blank" rel="external">http://git.oschina.net/crossin/learn-python/tree/master/voicegame</a></p>
<p>公众号：Crossin的编程教室</p>
<hr>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="0" height="0" src="https://music.daoapp.io/iframe?song=453726069&qssl=1&qlrc=1&qnarrow=0&autoplay=1"></iframe><br><strong>版权声明</strong></p>
<p><img src="http://oonjkyvrf.bkt.clouddn.com/cc.png" alt=""></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5 中国大陆许可协议</a>进行许可。<br>本文首发于<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>。欢迎转载，但转载请注明来自<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。  </p>
<p>本文永久链接：<a href="http://dukeluo.github.io/2017/03/06/let&#39;s-go-PiPiXia/">http://dukeluo.github.io/2017/03/06/let&#39;s-go-PiPiXia/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在知乎上发现此游戏的分享，非常感谢作者的分享。这是我阅读的第一个小项目代码。给我最深的体会便是divide and conquer，逐步实现模块的功能，最后实现游戏的功能。简单分析，好像游戏实现的思路并不难。&lt;br&gt;
    
    </summary>
    
      <category term="编程语言" scheme="http://dukeluo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
      <category term="阅读" scheme="http://dukeluo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="python" scheme="http://dukeluo.github.io/tags/python/"/>
    
      <category term="读书笔记" scheme="http://dukeluo.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.00.1x  计算机科学和Python编程导论  Set 2</title>
    <link href="http://dukeluo.github.io/2017/03/05/MIT-6.00.1x-Set2/"/>
    <id>http://dukeluo.github.io/2017/03/05/MIT-6.00.1x-Set2/</id>
    <published>2017-03-04T16:00:00.000Z</published>
    <updated>2017-04-20T15:39:58.183Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="Paying-Off-Credit-Card-Debt"><a href="#Paying-Off-Credit-Card-Debt" class="headerlink" title="Paying Off Credit Card Debt"></a>Paying Off Credit Card Debt</h3><blockquote>
<p>Each month, a credit card statement will come with the option for you to pay a minimum amount of your charge, usually 2% of the balance due. However, the credit card company earns money by charging interest on the balance that you don’t pay. So even if you pay credit card payments on time, interest is still accruing on the outstanding balance.</p>
<p>You can think about this in the following way.</p>
<p>At the beginning of month 0 (when the credit card statement arrives), assume you owe an amount we will call <em>b<sub>0</sub></em> (b for <em>balance</em>; subscript <em>0</em> to indicate this is the balance at month 0).</p>
<p>Any payment you make during that month is deducted from the balance. Let’s call the payment you make in month 0, <em>p<sub>0</sub></em>. Thus, your unpaid balance for month 0, <em>ub<sub>0</sub></em>, is equal to <em>b<sub>0</sub>-p<sub>0</sub></em>.<br><em>ub<sub>0</sub>=b<sub>0</sub>-p<sub>0</sub></em></p>
<p>At the beginning of month 1, the credit card company will charge you interest on your unpaid balance. So if your annual interest rate is <em>r</em>, then at the beginning of month 1, your new balance is your previous unpaid balance <em>ub<sub>0</sub></em>, plus the interest on this unpaid balance for the month. In algebra, this new balance would be<br><em>b<sub>1</sub>=ub<sub>0</sub>+r/12.0</em>ub<sub>0</sub>*                            </p>
<p>In month 1, we will make another payment,  <em>p<sub>1</sub></em> . That payment has to cover some of the interest costs, so it does not completely go towards paying off the original charge. The balance at the beginning of month 2, <em>b<sub>2</sub></em>, can be calculated by first calculating the unpaid balance after paying <em>p<sub>1</sub></em>, then by adding the interest accrued:<br><em>ub<sub>1</sub>=b<sub>1</sub>-p<sub>1</sub>,</em><br><em>b<sub>2</sub>=ub<sub>1</sub>+r/12.0</em>ub<sub>1</sub>*</p>
<p>If you choose just to pay off the minimum monthly payment each month, you will see that the compound interest will dramatically reduce your ability to lower your debt.</p>
<p>Let’s look at an example. If you’ve got a $5,000 balance on a credit card with 18% annual interest rate, and the minimum monthly payment is 2% of the current balance, we would have the following repayment schedule if you only pay the minimum payment each month:</p>
<table>
<thead>
<tr>
<th>Month</th>
<th>Balance</th>
<th>Minimum Payment</th>
<th>Unpaid Balance</th>
<th>Interest</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>5000.00</td>
<td>100(=5000* 0.02)</td>
<td>4900(=5000- 100)</td>
<td>73.50(=0.18/12.0 * 4900)</td>
</tr>
<tr>
<td>1</td>
<td>4973.50(=4900 + 73.50)</td>
<td>99.47(=4973.50 * 0.02)</td>
<td>4874.03(=4973.50 - 99.47)</td>
<td>73.11(=0.18/12.0 * 4874.03)</td>
</tr>
<tr>
<td>2</td>
<td>4947.14(=4874.03 + 73.11)</td>
<td>98.94(=4947.14 * 0.02)</td>
<td>4848.20(=4947.14 - 98.94)</td>
<td>72.72(=0.18/12.0 * 4848.20)</td>
</tr>
</tbody>
</table>
<p>You can see that a lot of your payment is going to cover interest, and if you work this through month 12, you will see that after a year, you will have paid \$1165.63 and yet you will still owe \$4691.11 on what was originally a \$5000.00 debt. Pretty depressing!</p>
</blockquote>
<hr>
<h3 id="Problem-1-Paying-the-Minimum"><a href="#Problem-1-Paying-the-Minimum" class="headerlink" title="Problem 1: Paying the Minimum"></a>Problem 1: Paying the Minimum</h3><blockquote>
<p>Write a program to calculate the credit card balance after one year if a person only pays the minimum monthly payment required by the credit card company each month.</p>
<p>The following variables contain values as described below:</p>
<pre><code>balance - the outstanding balance on the credit card
nualInterestRate - annual interest rate as a decimal
monthlyPaymentRate - minimum monthly payment rate as a decimal
</code></pre><p>For each month, calculate statements on the monthly payment and remaining balance, and print to screen something of the format:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Month: <span class="number">1</span></span><br><span class="line">Minimum monthly payment: <span class="number">96.0</span></span><br><span class="line">Remaining balance: <span class="number">4784.0</span></span><br></pre></td></tr></table></figure></p>
<p>Be sure to print out no more than two decimal digits of accuracy - so print<br><code>Remaining balance: 813.41</code><br>instead of<br><code>Remaining balance: 813.4141998135</code><br>Finally, print out the total amount paid that year and the remaining balance at the end of the year in the format:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Total paid: <span class="number">96.0</span></span><br><span class="line">Remaining balance: <span class="number">4784.0</span></span><br></pre></td></tr></table></figure></p>
<p>A summary of the required math is found below:</p>
<pre><code>Monthly interest rate= (Annual interest rate) / 12.0
Minimum monthly payment = (Minimum monthly payment rate) x (Previous balance)
Monthly unpaid balance = (Previous balance) - (Minimum monthly payment)
Updated balance each month = (Monthly unpaid balance) + (Monthly interest rate x Monthly unpaid balance)
</code></pre></blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">monBalance=balance</span><br><span class="line">totalPay=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> month <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">13</span>):</span><br><span class="line">    minPayment=monBalance * monthlyPaymentRate</span><br><span class="line">    restBalance=monBalance - minPayment</span><br><span class="line">    interest=restBalance * (annualInterestRate/<span class="number">12.0</span>)</span><br><span class="line">    monBalance =restBalance + interest</span><br><span class="line">    totalPay+=minPayment</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Month:'</span>+str(month)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Minimum monthly payment:'</span>+<span class="string">'%.2f'</span> % minPayment <span class="comment">#保留两位小数</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Remaining balance:'</span>+<span class="string">'%.2f'</span> % monBalance</span><br><span class="line">    </span><br><span class="line"><span class="keyword">print</span> <span class="string">'Total paid:'</span>+<span class="string">'%.2f'</span> % totalPay</span><br><span class="line"><span class="keyword">print</span> <span class="string">'Remaining balance:'</span>+<span class="string">'%.2f'</span> % monBalance</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Problem-2-Paying-Debt-Off-In-a-Year"><a href="#Problem-2-Paying-Debt-Off-In-a-Year" class="headerlink" title="Problem 2: Paying Debt Off In a Year"></a>Problem 2: Paying Debt Off In a Year</h3><blockquote>
<p>Now write a program that calculates the minimum fixed monthly payment needed in order pay off a credit card balance within 12 months. By a fixed monthly payment, we mean a single number which does not change each month, but instead is a constant amount that will be paid each month.</p>
<p>In this problem, we will not be dealing with a minimum monthly payment rate.</p>
<p>The following variables contain values as described below:</p>
<pre><code>balance - the outstanding balance on the credit card
annualInterestRate - annual interest rate as a decimal
</code></pre><p>The program should print out one line: the lowest monthly payment that will pay off all debt in under 1 year, for example:<br><code>Lowest Payment: 180</code></p>
<p>Assume that the interest is compounded monthly according to the balance at the end of the month (after the payment for that month is made). The monthly payment must be a multiple of $10 and is the same for all months. Notice that it is possible for the balance to become negative using this payment scheme, which is okay. A summary of the required math is found below:</p>
<pre><code>Monthly interest rate = (Annual interest rate) / 12.0
Monthly unpaid balance = (Previous balance) - (Minimum monthly payment)
Updated balance each month = (Monthly unpaid balance) + (Monthly interest rate x Monthly unpaid balance)
</code></pre></blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pay=<span class="number">10</span></span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    unpaidBalance=balance</span><br><span class="line">    <span class="keyword">for</span> month <span class="keyword">in</span> range(<span class="number">12</span>):   <span class="comment">#重复12次</span></span><br><span class="line">        unpaidBalance-=pay</span><br><span class="line">        unpaidBalance=unpaidBalance + unpaidBalance * (annualInterestRate /<span class="number">12.0</span>)</span><br><span class="line">    <span class="keyword">if</span> unpaidBalance &lt;=<span class="number">0</span>:     <span class="comment">#小于或等于零时退出循环</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">'Lowest Payment: '</span>+str(pay)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        pay+=<span class="number">10</span></span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Problem-3-Using-Bisection-Search-to-Make-the-Program-Faster"><a href="#Problem-3-Using-Bisection-Search-to-Make-the-Program-Faster" class="headerlink" title="Problem 3: Using Bisection Search to Make the Program Faster"></a>Problem 3: Using Bisection Search to Make the Program Faster</h3><blockquote>
<p>You’ll notice that in Problem 2, your monthly payment had to be a multiple of \$10. Why did we make it that way? You can try running your code locally so that the payment can be any dollar and cent amount (in other words, the monthly payment is a multiple of \$0.01). Does your code still work? It should, but you may notice that your code runs more slowly, especially in cases with very large balances and interest rates. (Note: when your code is running on our servers, there are limits on the amount of computing time each submission is allowed, so your observations from running this experiment on the grading system might be limited to an error message complaining about too much time taken.)</p>
<p>Well then, how can we calculate a more accurate fixed monthly payment than we did in Problem 2 without running into the problem of slow code? We can make this program run faster using a technique introduced in lecture - bisection search!</p>
<p>The following variables contain values as described below:</p>
<pre><code>balance - the outstanding balance on the credit card
annualInterestRate - annual interest rate as a decimal
</code></pre><p>To recap the problem: we are searching for the smallest monthly payment such that we can pay off the entire balance within a year. What is a reasonable lower bound for this payment value? $0 is the obvious anwer, but you can do better than that. If there was no interest, the debt can be paid off by monthly payments of one-twelfth of the original balance, so we must pay at least this much every month. One-twelfth of the original balance is a good lower bound.</p>
<p>What is a good upper bound? Imagine that instead of paying monthly, we paid off the entire balance at the end of the year. What we ultimately pay must be greater than what we would’ve paid in monthly installments, because the interest was compounded on the balance we didn’t pay off each month. So a good upper bound for the monthly payment would be one-twelfth of the balance, after having its interest compounded monthly for an entire year.<br>In short:</p>
<pre><code>Monthly interest rate = (Annual interest rate) / 12.0
Monthly payment lower bound = Balance / 12
Monthly payment upper bound = (Balance x (1 + Monthly interest rate)12) / 12.0
</code></pre><p>Write a program that uses these bounds and bisection search (for more info check out the Wikipedia page on bisection search) to find the smallest monthly payment to the cent (no more multiples of $10) such that we can pay off the debt within a year. Try it out with large inputs, and notice how fast it is (try the same large inputs in your solution to Problem 2 to compare!). Produce the same return value as you did in Problem 2.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">lowerBound = balance / <span class="number">12</span></span><br><span class="line">upperBound = (balance * (<span class="number">1</span> + annualInterestRate / <span class="number">12.0</span>) ** <span class="number">12</span>) / <span class="number">12.0</span>        </span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        pay = (lowerBound + upperBound) / <span class="number">2.0</span></span><br><span class="line">        unpaidBalance=balance</span><br><span class="line">        <span class="keyword">for</span> month <span class="keyword">in</span> range(<span class="number">12</span>):</span><br><span class="line">                unpaidBalance-=pay</span><br><span class="line">                unpaidBalance=unpaidBalance + unpaidBalance * (annualInterestRate /<span class="number">12.0</span>)</span><br><span class="line">        <span class="keyword">if</span> abs(unpaidBalance - <span class="number">0</span>) &lt;=<span class="number">0.01</span>:  <span class="comment">#控制精度</span></span><br><span class="line">                <span class="keyword">print</span> <span class="string">'Lowest Payment: '</span>+<span class="string">'%.2f'</span> % pay</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> unpaidBalance &gt; <span class="number">0</span>:</span><br><span class="line">                        lowerBound = pay</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                        upperBound = pay</span><br></pre></td></tr></table></figure>
<hr>
<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="0" height="0" src="https://music.daoapp.io/iframe?song=21301195&qssl=1&qlrc=0&qnarrow=0&autoplay=1"></iframe><br><strong>版权声明</strong></p>
<p><img src="http://oonjkyvrf.bkt.clouddn.com/cc.png" alt=""></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5 中国大陆许可协议</a>进行许可。<br>本文首发于<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>。欢迎转载，但转载请注明来自<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。  </p>
<p>本文永久链接：<a href="http://dukeluo.github.io/2017/03/05/MIT-6.00.1x-Set2/">http://dukeluo.github.io/2017/03/05/MIT-6.00.1x-Set2/</a></p>
]]></content>
    
    <summary type="html">
    
      My personal solution to the problem set 2.
    
    </summary>
    
      <category term="编程语言" scheme="http://dukeluo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="python" scheme="http://dukeluo.github.io/tags/python/"/>
    
      <category term="MIT" scheme="http://dukeluo.github.io/tags/MIT/"/>
    
      <category term="分享" scheme="http://dukeluo.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>关于python变量名的几点注意</title>
    <link href="http://dukeluo.github.io/2017/02/28/python-name/"/>
    <id>http://dukeluo.github.io/2017/02/28/python-name/</id>
    <published>2017-02-27T16:00:00.000Z</published>
    <updated>2017-04-20T16:20:25.402Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="Points"><a href="#Points" class="headerlink" title="Points"></a>Points</h3><p>1.类似<code>__xxx__</code>的变量名，以双下划线开头，且以双下划线结尾的，是特殊变量。特殊变量可以直接访问，不是private变量。不能用<code>__name__</code>,<code>__score__</code>这样的变量名。</p>
<p>2.以一个下划线开头的实例变量名，比如<code>_name</code>，这样的实例变量外部是可以访问的，但是，约定俗成，应视为私有变量，不应随便访问。</p>
<p>3.以__开头的实例变量就变成了一个private。只有内部可以访问，外部不能访问。</p>
<p>4.可以通过<code>_类名__实例变量名</code>强行访问__实例变量名。</p>
<hr>
<h3 id="有话说"><a href="#有话说" class="headerlink" title="有话说"></a>有话说</h3><p><strong><em>请你相信我:我所说的每一句话，都是错的</em></strong>       —和菜头</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://oonjkyvrf.bkt.clouddn.com/cc.png" alt=""></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5 中国大陆许可协议</a>进行许可。<br>本文首发于<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>。欢迎转载，但转载请注明来自<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。  </p>
<p>本文永久链接：<a href="http://dukeluo.github.io/2017/02/28/python-name/">http://dukeluo.github.io/2017/02/28/python-name/</a></p>
]]></content>
    
    <summary type="html">
    
      一点笔记
    
    </summary>
    
      <category term="编程语言" scheme="http://dukeluo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="python" scheme="http://dukeluo.github.io/tags/python/"/>
    
      <category term="读书笔记" scheme="http://dukeluo.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>MIT 6.00.1x  计算机科学和Python编程导论  Set 1</title>
    <link href="http://dukeluo.github.io/2017/02/26/MIT-6.00.1x-Set1/"/>
    <id>http://dukeluo.github.io/2017/02/26/MIT-6.00.1x-Set1/</id>
    <published>2017-02-25T16:00:00.000Z</published>
    <updated>2017-04-20T16:21:03.247Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><h3 id="Counting-Vowels"><a href="#Counting-Vowels" class="headerlink" title="Counting Vowels "></a><strong>Counting Vowels </strong></h3><blockquote>
<p>Assume s is a string of lower case characters.<br>Write a program that counts up the number of vowels contained in the string s. Valid vowels are: ‘a’, ‘e’, ‘i’, ‘o’, and ‘u’. For example, if s = ‘azcbobobegghakl’, your program should print:<br><code>Number of vowels: 5</code></p>
<p>For problems such as these, do not include raw_input statements or define the variable s in any way. Our automated testing will provide a value of s for you - so the code you submit in the following box should assume s is already defined. If you are confused by this instruction, please review L4 Problems 10 and 11 before you begin this problem set.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> (<span class="string">'Number of vowel: '</span>+str(s.count(<span class="string">'a'</span>)+s.count(<span class="string">'e'</span>)+s.count(<span class="string">'i'</span>)+s.count(<span class="string">'o'</span>)+s.count(<span class="string">'u'</span>)))</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Counting-bobs"><a href="#Counting-bobs" class="headerlink" title="Counting bobs "></a><strong>Counting bobs </strong></h3><blockquote>
<p>Assume s is a string of lower case characters.<br>Write a program that prints the number of times the string ‘bob’ occurs in s. For example, if s = ‘azcbobobegghakl’, then your program should print:<br><code>Number of times bob occurs is: 2</code></p>
<p>For problems such as these, do not include raw_input statements or define the variable s in any way. Our automated testing will provide a value of s for you - so the code you submit in the following box should assume s is already defined. If you are confused by this instruction, please review L4 Problems 10 and 11 before you begin this problem set.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">num=<span class="number">0</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)<span class="number">-2</span>):</span><br><span class="line">    <span class="keyword">if</span> (s[i:i+<span class="number">3</span>]==<span class="string">'bob'</span>):</span><br><span class="line">        num+=<span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'Number of times bob occurs is: '</span>+str(num))</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="Alphabetical-Substrings"><a href="#Alphabetical-Substrings" class="headerlink" title="Alphabetical Substrings"></a><strong>Alphabetical Substrings</strong></h3><blockquote>
<p>Assume s is a string of lower case characters.<br>Write a program that prints the longest substring of s in which the letters occur in alphabetical order. For example,  if s = ‘azcbobobegghakl’, then your program should print:<br><code>Longest substring in alphabetical order is: beggh</code></p>
<p>In the case of ties, print the first substring. For example, if s = ‘abcbcd’, then your program should print:<br><code>Longest substring in alphabetical order is: abc</code></p>
<p>For problems such as these, do not include raw_input statements or define the variable s in any way. Our automated testing will provide a value of s for you - so the code you submit in the following box should assume s is already defined. If you are confused by this instruction, please review L4 Problems 10 and 11 before you begin this problem set.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'''</span><br><span class="line">若未按照字母顺序，便分割字符串，得到字符子串，</span><br><span class="line">然后打印长度最长的字符子串</span><br><span class="line">'''</span></span><br><span class="line">newL=[]</span><br><span class="line">beg=<span class="number">0</span></span><br><span class="line">remain=s </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(s)<span class="number">-1</span>):</span><br><span class="line">    <span class="keyword">if</span> (s[i+<span class="number">1</span>] &lt; s[i]):</span><br><span class="line">        end=i+<span class="number">1</span></span><br><span class="line">        newL.append(s[beg:end])</span><br><span class="line">        beg=end</span><br><span class="line">        remain=s[beg:]</span><br><span class="line">newL.append(remain)</span><br><span class="line">longest=<span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> newL:</span><br><span class="line">    <span class="keyword">if</span> len(e) &gt; len(longest):</span><br><span class="line">        longest=e</span><br><span class="line"><span class="keyword">print</span> (<span class="string">'Longest substring in alphabetical order is: '</span>+str(longest))</span><br></pre></td></tr></table></figure>
<hr>
<p><strong><em>I’m gonna make him an offer he can’t refuse.</em></strong>    —《Godfather》</p>
<hr>
<p><strong>版权声明</strong></p>
<p><img src="http://oonjkyvrf.bkt.clouddn.com/cc.png" alt=""></p>
<p>本作品采用<a href="https://creativecommons.org/licenses/by/2.5/cn/" target="_blank" rel="external">知识共享署名 2.5 中国大陆许可协议</a>进行许可。<br>本文首发于<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>。欢迎转载，但转载请注明来自<a href="http://dukeluo.com" target="_blank" rel="external">DukeLuo’s Blog</a>，并保持转载后文章内容的完整。本人保留所有版权相关权利。  </p>
<p>本文永久链接：<a href="http://dukeluo.github.io/2017/02/26/MIT-6.00.1x-Set1/">http://dukeluo.github.io/2017/02/26/MIT-6.00.1x-Set1/</a></p>
]]></content>
    
    <summary type="html">
    
      My personal solution to the problem set 1.
    
    </summary>
    
      <category term="编程语言" scheme="http://dukeluo.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="python" scheme="http://dukeluo.github.io/tags/python/"/>
    
      <category term="MIT" scheme="http://dukeluo.github.io/tags/MIT/"/>
    
      <category term="分享" scheme="http://dukeluo.github.io/tags/%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
</feed>
